// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	lxd "github.com/canonical/lxd/client"
	api "github.com/canonical/lxd/shared/api"

	mock "github.com/stretchr/testify/mock"
)

// MockRemoteOperation is an autogenerated mock type for the RemoteOperation type
type MockRemoteOperation struct {
	mock.Mock
}

// AddHandler provides a mock function with given fields: function
func (_m *MockRemoteOperation) AddHandler(function func(api.Operation)) (*lxd.EventTarget, error) {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for AddHandler")
	}

	var r0 *lxd.EventTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(func(api.Operation)) (*lxd.EventTarget, error)); ok {
		return rf(function)
	}
	if rf, ok := ret.Get(0).(func(func(api.Operation)) *lxd.EventTarget); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.EventTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(func(api.Operation)) error); ok {
		r1 = rf(function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTarget provides a mock function with no fields
func (_m *MockRemoteOperation) CancelTarget() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CancelTarget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTarget provides a mock function with no fields
func (_m *MockRemoteOperation) GetTarget() (*api.Operation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTarget")
	}

	var r0 *api.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.Operation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Operation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Wait provides a mock function with no fields
func (_m *MockRemoteOperation) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRemoteOperation creates a new instance of MockRemoteOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteOperation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteOperation {
	mock := &MockRemoteOperation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
