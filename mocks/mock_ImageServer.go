// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	http "net/http"

	api "github.com/canonical/lxd/shared/api"

	lxd "github.com/canonical/lxd/client"

	mock "github.com/stretchr/testify/mock"
)

// MockImageServer is an autogenerated mock type for the ImageServer type
type MockImageServer struct {
	mock.Mock
}

// Disconnect provides a mock function with no fields
func (_m *MockImageServer) Disconnect() {
	_m.Called()
}

// DoHTTP provides a mock function with given fields: req
func (_m *MockImageServer) DoHTTP(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DoHTTP")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportImage provides a mock function with given fields: fingerprint, image
func (_m *MockImageServer) ExportImage(fingerprint string, image api.ImageExportPost) (lxd.Operation, error) {
	ret := _m.Called(fingerprint, image)

	if len(ret) == 0 {
		panic("no return value specified for ExportImage")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ImageExportPost) (lxd.Operation, error)); ok {
		return rf(fingerprint, image)
	}
	if rf, ok := ret.Get(0).(func(string, api.ImageExportPost) lxd.Operation); ok {
		r0 = rf(fingerprint, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ImageExportPost) error); ok {
		r1 = rf(fingerprint, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionInfo provides a mock function with no fields
func (_m *MockImageServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionInfo")
	}

	var r0 *lxd.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*lxd.ConnectionInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *lxd.ConnectionInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHTTPClient provides a mock function with no fields
func (_m *MockImageServer) GetHTTPClient() (*http.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPClient")
	}

	var r0 *http.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*http.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: fingerprint
func (_m *MockImageServer) GetImage(fingerprint string) (*api.Image, string, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *api.Image
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Image, string, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Image); ok {
		r0 = rf(fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fingerprint)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageAlias provides a mock function with given fields: name
func (_m *MockImageServer) GetImageAlias(name string) (*api.ImageAliasesEntry, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetImageAlias")
	}

	var r0 *api.ImageAliasesEntry
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ImageAliasesEntry, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ImageAliasesEntry); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageAliasArchitectures provides a mock function with given fields: imageType, name
func (_m *MockImageServer) GetImageAliasArchitectures(imageType string, name string) (map[string]*api.ImageAliasesEntry, error) {
	ret := _m.Called(imageType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliasArchitectures")
	}

	var r0 map[string]*api.ImageAliasesEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]*api.ImageAliasesEntry, error)); ok {
		return rf(imageType, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]*api.ImageAliasesEntry); ok {
		r0 = rf(imageType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(imageType, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageAliasNames provides a mock function with no fields
func (_m *MockImageServer) GetImageAliasNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliasNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageAliasType provides a mock function with given fields: imageType, name
func (_m *MockImageServer) GetImageAliasType(imageType string, name string) (*api.ImageAliasesEntry, string, error) {
	ret := _m.Called(imageType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliasType")
	}

	var r0 *api.ImageAliasesEntry
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.ImageAliasesEntry, string, error)); ok {
		return rf(imageType, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.ImageAliasesEntry); ok {
		r0 = rf(imageType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(imageType, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(imageType, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageAliases provides a mock function with no fields
func (_m *MockImageServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliases")
	}

	var r0 []api.ImageAliasesEntry
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.ImageAliasesEntry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.ImageAliasesEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageFile provides a mock function with given fields: fingerprint, req
func (_m *MockImageServer) GetImageFile(fingerprint string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	ret := _m.Called(fingerprint, req)

	if len(ret) == 0 {
		panic("no return value specified for GetImageFile")
	}

	var r0 *lxd.ImageFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)); ok {
		return rf(fingerprint, req)
	}
	if rf, ok := ret.Get(0).(func(string, lxd.ImageFileRequest) *lxd.ImageFileResponse); ok {
		r0 = rf(fingerprint, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ImageFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lxd.ImageFileRequest) error); ok {
		r1 = rf(fingerprint, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageFingerprints provides a mock function with no fields
func (_m *MockImageServer) GetImageFingerprints() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageFingerprints")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageSecret provides a mock function with given fields: fingerprint
func (_m *MockImageServer) GetImageSecret(fingerprint string) (string, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetImageSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fingerprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImages provides a mock function with no fields
func (_m *MockImageServer) GetImages() ([]api.Image, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImages")
	}

	var r0 []api.Image
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Image, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesWithFilter provides a mock function with given fields: filters
func (_m *MockImageServer) GetImagesWithFilter(filters []string) ([]api.Image, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetImagesWithFilter")
	}

	var r0 []api.Image
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]api.Image, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func([]string) []api.Image); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateImage provides a mock function with given fields: fingerprint, secret
func (_m *MockImageServer) GetPrivateImage(fingerprint string, secret string) (*api.Image, string, error) {
	ret := _m.Called(fingerprint, secret)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateImage")
	}

	var r0 *api.Image
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.Image, string, error)); ok {
		return rf(fingerprint, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.Image); ok {
		r0 = rf(fingerprint, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(fingerprint, secret)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(fingerprint, secret)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPrivateImageFile provides a mock function with given fields: fingerprint, secret, req
func (_m *MockImageServer) GetPrivateImageFile(fingerprint string, secret string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	ret := _m.Called(fingerprint, secret, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateImageFile")
	}

	var r0 *lxd.ImageFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)); ok {
		return rf(fingerprint, secret, req)
	}
	if rf, ok := ret.Get(0).(func(string, string, lxd.ImageFileRequest) *lxd.ImageFileResponse); ok {
		r0 = rf(fingerprint, secret, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ImageFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, lxd.ImageFileRequest) error); ok {
		r1 = rf(fingerprint, secret, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockImageServer creates a new instance of MockImageServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageServer {
	mock := &MockImageServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
