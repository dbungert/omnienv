// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/canonical/lxd/shared/api"

	lxd "github.com/canonical/lxd/client"

	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gorilla/websocket"
)

// MockOperation is an autogenerated mock type for the Operation type
type MockOperation struct {
	mock.Mock
}

// AddHandler provides a mock function with given fields: function
func (_m *MockOperation) AddHandler(function func(api.Operation)) (*lxd.EventTarget, error) {
	ret := _m.Called(function)

	if len(ret) == 0 {
		panic("no return value specified for AddHandler")
	}

	var r0 *lxd.EventTarget
	var r1 error
	if rf, ok := ret.Get(0).(func(func(api.Operation)) (*lxd.EventTarget, error)); ok {
		return rf(function)
	}
	if rf, ok := ret.Get(0).(func(func(api.Operation)) *lxd.EventTarget); ok {
		r0 = rf(function)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.EventTarget)
		}
	}

	if rf, ok := ret.Get(1).(func(func(api.Operation)) error); ok {
		r1 = rf(function)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cancel provides a mock function with no fields
func (_m *MockOperation) Cancel() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with no fields
func (_m *MockOperation) Get() api.Operation {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 api.Operation
	if rf, ok := ret.Get(0).(func() api.Operation); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(api.Operation)
	}

	return r0
}

// GetWebsocket provides a mock function with given fields: secret
func (_m *MockOperation) GetWebsocket(secret string) (*websocket.Conn, error) {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for GetWebsocket")
	}

	var r0 *websocket.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*websocket.Conn, error)); ok {
		return rf(secret)
	}
	if rf, ok := ret.Get(0).(func(string) *websocket.Conn); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with no fields
func (_m *MockOperation) Refresh() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveHandler provides a mock function with given fields: target
func (_m *MockOperation) RemoveHandler(target *lxd.EventTarget) error {
	ret := _m.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for RemoveHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lxd.EventTarget) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with no fields
func (_m *MockOperation) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitContext provides a mock function with given fields: ctx
func (_m *MockOperation) WaitContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOperation creates a new instance of MockOperation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperation {
	mock := &MockOperation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
