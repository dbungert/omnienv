// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	http "net/http"

	api "github.com/canonical/lxd/shared/api"

	io "io"

	lxd "github.com/canonical/lxd/client"

	mock "github.com/stretchr/testify/mock"

	net "net"

	sftp "github.com/pkg/sftp"

	websocket "github.com/gorilla/websocket"
)

// MockContainerServer is an autogenerated mock type for the ContainerServer type
type MockContainerServer struct {
	mock.Mock
}

// CheckExtension provides a mock function with given fields: extension
func (_m *MockContainerServer) CheckExtension(extension string) error {
	ret := _m.Called(extension)

	if len(ret) == 0 {
		panic("no return value specified for CheckExtension")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(extension)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsoleContainer provides a mock function with given fields: containerName, console, args
func (_m *MockContainerServer) ConsoleContainer(containerName string, console api.ContainerConsolePost, args *lxd.ContainerConsoleArgs) (lxd.Operation, error) {
	ret := _m.Called(containerName, console, args)

	if len(ret) == 0 {
		panic("no return value specified for ConsoleContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerConsolePost, *lxd.ContainerConsoleArgs) (lxd.Operation, error)); ok {
		return rf(containerName, console, args)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerConsolePost, *lxd.ContainerConsoleArgs) lxd.Operation); ok {
		r0 = rf(containerName, console, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerConsolePost, *lxd.ContainerConsoleArgs) error); ok {
		r1 = rf(containerName, console, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleInstance provides a mock function with given fields: instanceName, console, args
func (_m *MockContainerServer) ConsoleInstance(instanceName string, console api.InstanceConsolePost, args *lxd.InstanceConsoleArgs) (lxd.Operation, error) {
	ret := _m.Called(instanceName, console, args)

	if len(ret) == 0 {
		panic("no return value specified for ConsoleInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) (lxd.Operation, error)); ok {
		return rf(instanceName, console, args)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) lxd.Operation); ok {
		r0 = rf(instanceName, console, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) error); ok {
		r1 = rf(instanceName, console, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsoleInstanceDynamic provides a mock function with given fields: instanceName, console, args
func (_m *MockContainerServer) ConsoleInstanceDynamic(instanceName string, console api.InstanceConsolePost, args *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error) {
	ret := _m.Called(instanceName, console, args)

	if len(ret) == 0 {
		panic("no return value specified for ConsoleInstanceDynamic")
	}

	var r0 lxd.Operation
	var r1 func(io.ReadWriteCloser) error
	var r2 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error)); ok {
		return rf(instanceName, console, args)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) lxd.Operation); ok {
		r0 = rf(instanceName, console, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) func(io.ReadWriteCloser) error); ok {
		r1 = rf(instanceName, console, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func(io.ReadWriteCloser) error)
		}
	}

	if rf, ok := ret.Get(2).(func(string, api.InstanceConsolePost, *lxd.InstanceConsoleArgs) error); ok {
		r2 = rf(instanceName, console, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CopyContainer provides a mock function with given fields: source, container, args
func (_m *MockContainerServer) CopyContainer(source lxd.InstanceServer, container api.Container, args *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, container, args)

	if len(ret) == 0 {
		panic("no return value specified for CopyContainer")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, api.Container, *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error)); ok {
		return rf(source, container, args)
	}
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, api.Container, *lxd.ContainerCopyArgs) lxd.RemoteOperation); ok {
		r0 = rf(source, container, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.InstanceServer, api.Container, *lxd.ContainerCopyArgs) error); ok {
		r1 = rf(source, container, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyContainerSnapshot provides a mock function with given fields: source, containerName, snapshot, args
func (_m *MockContainerServer) CopyContainerSnapshot(source lxd.InstanceServer, containerName string, snapshot api.ContainerSnapshot, args *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, containerName, snapshot, args)

	if len(ret) == 0 {
		panic("no return value specified for CopyContainerSnapshot")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, string, api.ContainerSnapshot, *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error)); ok {
		return rf(source, containerName, snapshot, args)
	}
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, string, api.ContainerSnapshot, *lxd.ContainerSnapshotCopyArgs) lxd.RemoteOperation); ok {
		r0 = rf(source, containerName, snapshot, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.InstanceServer, string, api.ContainerSnapshot, *lxd.ContainerSnapshotCopyArgs) error); ok {
		r1 = rf(source, containerName, snapshot, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyImage provides a mock function with given fields: source, image, args
func (_m *MockContainerServer) CopyImage(source lxd.ImageServer, image api.Image, args *lxd.ImageCopyArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, image, args)

	if len(ret) == 0 {
		panic("no return value specified for CopyImage")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, *lxd.ImageCopyArgs) (lxd.RemoteOperation, error)); ok {
		return rf(source, image, args)
	}
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, *lxd.ImageCopyArgs) lxd.RemoteOperation); ok {
		r0 = rf(source, image, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.ImageServer, api.Image, *lxd.ImageCopyArgs) error); ok {
		r1 = rf(source, image, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyInstance provides a mock function with given fields: source, instance, args
func (_m *MockContainerServer) CopyInstance(source lxd.InstanceServer, instance api.Instance, args *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, instance, args)

	if len(ret) == 0 {
		panic("no return value specified for CopyInstance")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, api.Instance, *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error)); ok {
		return rf(source, instance, args)
	}
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, api.Instance, *lxd.InstanceCopyArgs) lxd.RemoteOperation); ok {
		r0 = rf(source, instance, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.InstanceServer, api.Instance, *lxd.InstanceCopyArgs) error); ok {
		r1 = rf(source, instance, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyInstanceSnapshot provides a mock function with given fields: source, instanceName, snapshot, args
func (_m *MockContainerServer) CopyInstanceSnapshot(source lxd.InstanceServer, instanceName string, snapshot api.InstanceSnapshot, args *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, instanceName, snapshot, args)

	if len(ret) == 0 {
		panic("no return value specified for CopyInstanceSnapshot")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, string, api.InstanceSnapshot, *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error)); ok {
		return rf(source, instanceName, snapshot, args)
	}
	if rf, ok := ret.Get(0).(func(lxd.InstanceServer, string, api.InstanceSnapshot, *lxd.InstanceSnapshotCopyArgs) lxd.RemoteOperation); ok {
		r0 = rf(source, instanceName, snapshot, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.InstanceServer, string, api.InstanceSnapshot, *lxd.InstanceSnapshotCopyArgs) error); ok {
		r1 = rf(source, instanceName, snapshot, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyStoragePoolVolume provides a mock function with given fields: pool, source, sourcePool, volume, args
func (_m *MockContainerServer) CopyStoragePoolVolume(pool string, source lxd.InstanceServer, sourcePool string, volume api.StorageVolume, args *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(pool, source, sourcePool, volume, args)

	if len(ret) == 0 {
		panic("no return value specified for CopyStoragePoolVolume")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error)); ok {
		return rf(pool, source, sourcePool, volume, args)
	}
	if rf, ok := ret.Get(0).(func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeCopyArgs) lxd.RemoteOperation); ok {
		r0 = rf(pool, source, sourcePool, volume, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeCopyArgs) error); ok {
		r1 = rf(pool, source, sourcePool, volume, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthGroup provides a mock function with given fields: groupsPost
func (_m *MockContainerServer) CreateAuthGroup(groupsPost api.AuthGroupsPost) error {
	ret := _m.Called(groupsPost)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.AuthGroupsPost) error); ok {
		r0 = rf(groupsPost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCertificate provides a mock function with given fields: certificate
func (_m *MockContainerServer) CreateCertificate(certificate api.CertificatesPost) error {
	ret := _m.Called(certificate)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.CertificatesPost) error); ok {
		r0 = rf(certificate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCertificateToken provides a mock function with given fields: certificate
func (_m *MockContainerServer) CreateCertificateToken(certificate api.CertificatesPost) (lxd.Operation, error) {
	ret := _m.Called(certificate)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateToken")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.CertificatesPost) (lxd.Operation, error)); ok {
		return rf(certificate)
	}
	if rf, ok := ret.Get(0).(func(api.CertificatesPost) lxd.Operation); ok {
		r0 = rf(certificate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.CertificatesPost) error); ok {
		r1 = rf(certificate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterGroup provides a mock function with given fields: group
func (_m *MockContainerServer) CreateClusterGroup(group api.ClusterGroupsPost) error {
	ret := _m.Called(group)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ClusterGroupsPost) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateClusterMember provides a mock function with given fields: member
func (_m *MockContainerServer) CreateClusterMember(member api.ClusterMembersPost) (lxd.Operation, error) {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterMember")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.ClusterMembersPost) (lxd.Operation, error)); ok {
		return rf(member)
	}
	if rf, ok := ret.Get(0).(func(api.ClusterMembersPost) lxd.Operation); ok {
		r0 = rf(member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.ClusterMembersPost) error); ok {
		r1 = rf(member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainer provides a mock function with given fields: container
func (_m *MockContainerServer) CreateContainer(container api.ContainersPost) (lxd.Operation, error) {
	ret := _m.Called(container)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.ContainersPost) (lxd.Operation, error)); ok {
		return rf(container)
	}
	if rf, ok := ret.Get(0).(func(api.ContainersPost) lxd.Operation); ok {
		r0 = rf(container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.ContainersPost) error); ok {
		r1 = rf(container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerBackup provides a mock function with given fields: containerName, backup
func (_m *MockContainerServer) CreateContainerBackup(containerName string, backup api.ContainerBackupsPost) (lxd.Operation, error) {
	ret := _m.Called(containerName, backup)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerBackupsPost) (lxd.Operation, error)); ok {
		return rf(containerName, backup)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerBackupsPost) lxd.Operation); ok {
		r0 = rf(containerName, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerBackupsPost) error); ok {
		r1 = rf(containerName, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerFile provides a mock function with given fields: containerName, path, args
func (_m *MockContainerServer) CreateContainerFile(containerName string, path string, args lxd.ContainerFileArgs) error {
	ret := _m.Called(containerName, path, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, lxd.ContainerFileArgs) error); ok {
		r0 = rf(containerName, path, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateContainerFromBackup provides a mock function with given fields: args
func (_m *MockContainerServer) CreateContainerFromBackup(args lxd.ContainerBackupArgs) (lxd.Operation, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerFromBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.ContainerBackupArgs) (lxd.Operation, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(lxd.ContainerBackupArgs) lxd.Operation); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.ContainerBackupArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerFromImage provides a mock function with given fields: source, image, imgcontainer
func (_m *MockContainerServer) CreateContainerFromImage(source lxd.ImageServer, image api.Image, imgcontainer api.ContainersPost) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, image, imgcontainer)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerFromImage")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, api.ContainersPost) (lxd.RemoteOperation, error)); ok {
		return rf(source, image, imgcontainer)
	}
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, api.ContainersPost) lxd.RemoteOperation); ok {
		r0 = rf(source, image, imgcontainer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.ImageServer, api.Image, api.ContainersPost) error); ok {
		r1 = rf(source, image, imgcontainer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerSnapshot provides a mock function with given fields: containerName, snapshot
func (_m *MockContainerServer) CreateContainerSnapshot(containerName string, snapshot api.ContainerSnapshotsPost) (lxd.Operation, error) {
	ret := _m.Called(containerName, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerSnapshotsPost) (lxd.Operation, error)); ok {
		return rf(containerName, snapshot)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerSnapshotsPost) lxd.Operation); ok {
		r0 = rf(containerName, snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerSnapshotsPost) error); ok {
		r1 = rf(containerName, snapshot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerTemplateFile provides a mock function with given fields: containerName, templateName, content
func (_m *MockContainerServer) CreateContainerTemplateFile(containerName string, templateName string, content io.ReadSeeker) error {
	ret := _m.Called(containerName, templateName, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerTemplateFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.ReadSeeker) error); ok {
		r0 = rf(containerName, templateName, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIdentityProviderGroup provides a mock function with given fields: identityProviderGroup
func (_m *MockContainerServer) CreateIdentityProviderGroup(identityProviderGroup api.IdentityProviderGroup) error {
	ret := _m.Called(identityProviderGroup)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityProviderGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.IdentityProviderGroup) error); ok {
		r0 = rf(identityProviderGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIdentityTLS provides a mock function with given fields: identitiesTLSPost
func (_m *MockContainerServer) CreateIdentityTLS(identitiesTLSPost api.IdentitiesTLSPost) error {
	ret := _m.Called(identitiesTLSPost)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityTLS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.IdentitiesTLSPost) error); ok {
		r0 = rf(identitiesTLSPost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIdentityTLSToken provides a mock function with given fields: identitiesTLSPost
func (_m *MockContainerServer) CreateIdentityTLSToken(identitiesTLSPost api.IdentitiesTLSPost) (*api.CertificateAddToken, error) {
	ret := _m.Called(identitiesTLSPost)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityTLSToken")
	}

	var r0 *api.CertificateAddToken
	var r1 error
	if rf, ok := ret.Get(0).(func(api.IdentitiesTLSPost) (*api.CertificateAddToken, error)); ok {
		return rf(identitiesTLSPost)
	}
	if rf, ok := ret.Get(0).(func(api.IdentitiesTLSPost) *api.CertificateAddToken); ok {
		r0 = rf(identitiesTLSPost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.CertificateAddToken)
		}
	}

	if rf, ok := ret.Get(1).(func(api.IdentitiesTLSPost) error); ok {
		r1 = rf(identitiesTLSPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: image, args
func (_m *MockContainerServer) CreateImage(image api.ImagesPost, args *lxd.ImageCreateArgs) (lxd.Operation, error) {
	ret := _m.Called(image, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.ImagesPost, *lxd.ImageCreateArgs) (lxd.Operation, error)); ok {
		return rf(image, args)
	}
	if rf, ok := ret.Get(0).(func(api.ImagesPost, *lxd.ImageCreateArgs) lxd.Operation); ok {
		r0 = rf(image, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.ImagesPost, *lxd.ImageCreateArgs) error); ok {
		r1 = rf(image, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImageAlias provides a mock function with given fields: alias
func (_m *MockContainerServer) CreateImageAlias(alias api.ImageAliasesPost) error {
	ret := _m.Called(alias)

	if len(ret) == 0 {
		panic("no return value specified for CreateImageAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ImageAliasesPost) error); ok {
		r0 = rf(alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateImageSecret provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) CreateImageSecret(fingerprint string) (lxd.Operation, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for CreateImageSecret")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (lxd.Operation, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) lxd.Operation); ok {
		r0 = rf(fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstance provides a mock function with given fields: instance
func (_m *MockContainerServer) CreateInstance(instance api.InstancesPost) (lxd.Operation, error) {
	ret := _m.Called(instance)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstancesPost) (lxd.Operation, error)); ok {
		return rf(instance)
	}
	if rf, ok := ret.Get(0).(func(api.InstancesPost) lxd.Operation); ok {
		r0 = rf(instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstancesPost) error); ok {
		r1 = rf(instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceBackup provides a mock function with given fields: instanceName, backup
func (_m *MockContainerServer) CreateInstanceBackup(instanceName string, backup api.InstanceBackupsPost) (lxd.Operation, error) {
	ret := _m.Called(instanceName, backup)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceBackupsPost) (lxd.Operation, error)); ok {
		return rf(instanceName, backup)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceBackupsPost) lxd.Operation); ok {
		r0 = rf(instanceName, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceBackupsPost) error); ok {
		r1 = rf(instanceName, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceFile provides a mock function with given fields: instanceName, path, args
func (_m *MockContainerServer) CreateInstanceFile(instanceName string, path string, args lxd.InstanceFileArgs) error {
	ret := _m.Called(instanceName, path, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, lxd.InstanceFileArgs) error); ok {
		r0 = rf(instanceName, path, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInstanceFromBackup provides a mock function with given fields: args
func (_m *MockContainerServer) CreateInstanceFromBackup(args lxd.InstanceBackupArgs) (lxd.Operation, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceFromBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.InstanceBackupArgs) (lxd.Operation, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(lxd.InstanceBackupArgs) lxd.Operation); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.InstanceBackupArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceFromImage provides a mock function with given fields: source, image, req
func (_m *MockContainerServer) CreateInstanceFromImage(source lxd.ImageServer, image api.Image, req api.InstancesPost) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, image, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceFromImage")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, api.InstancesPost) (lxd.RemoteOperation, error)); ok {
		return rf(source, image, req)
	}
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, api.InstancesPost) lxd.RemoteOperation); ok {
		r0 = rf(source, image, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.ImageServer, api.Image, api.InstancesPost) error); ok {
		r1 = rf(source, image, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceSnapshot provides a mock function with given fields: instanceName, snapshot
func (_m *MockContainerServer) CreateInstanceSnapshot(instanceName string, snapshot api.InstanceSnapshotsPost) (lxd.Operation, error) {
	ret := _m.Called(instanceName, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceSnapshotsPost) (lxd.Operation, error)); ok {
		return rf(instanceName, snapshot)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceSnapshotsPost) lxd.Operation); ok {
		r0 = rf(instanceName, snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceSnapshotsPost) error); ok {
		r1 = rf(instanceName, snapshot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceTemplateFile provides a mock function with given fields: instanceName, templateName, content
func (_m *MockContainerServer) CreateInstanceTemplateFile(instanceName string, templateName string, content io.ReadSeeker) error {
	ret := _m.Called(instanceName, templateName, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceTemplateFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.ReadSeeker) error); ok {
		r0 = rf(instanceName, templateName, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetwork provides a mock function with given fields: network
func (_m *MockContainerServer) CreateNetwork(network api.NetworksPost) error {
	ret := _m.Called(network)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.NetworksPost) error); ok {
		r0 = rf(network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkACL provides a mock function with given fields: acl
func (_m *MockContainerServer) CreateNetworkACL(acl api.NetworkACLsPost) error {
	ret := _m.Called(acl)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkACL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.NetworkACLsPost) error); ok {
		r0 = rf(acl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkForward provides a mock function with given fields: networkName, forward
func (_m *MockContainerServer) CreateNetworkForward(networkName string, forward api.NetworkForwardsPost) error {
	ret := _m.Called(networkName, forward)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkForward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkForwardsPost) error); ok {
		r0 = rf(networkName, forward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkLoadBalancer provides a mock function with given fields: networkName, forward
func (_m *MockContainerServer) CreateNetworkLoadBalancer(networkName string, forward api.NetworkLoadBalancersPost) error {
	ret := _m.Called(networkName, forward)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkLoadBalancer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkLoadBalancersPost) error); ok {
		r0 = rf(networkName, forward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkPeer provides a mock function with given fields: networkName, peer
func (_m *MockContainerServer) CreateNetworkPeer(networkName string, peer api.NetworkPeersPost) error {
	ret := _m.Called(networkName, peer)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkPeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkPeersPost) error); ok {
		r0 = rf(networkName, peer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkZone provides a mock function with given fields: zone
func (_m *MockContainerServer) CreateNetworkZone(zone api.NetworkZonesPost) error {
	ret := _m.Called(zone)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkZone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.NetworkZonesPost) error); ok {
		r0 = rf(zone)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNetworkZoneRecord provides a mock function with given fields: zone, record
func (_m *MockContainerServer) CreateNetworkZoneRecord(zone string, record api.NetworkZoneRecordsPost) error {
	ret := _m.Called(zone, record)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkZoneRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkZoneRecordsPost) error); ok {
		r0 = rf(zone, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProfile provides a mock function with given fields: profile
func (_m *MockContainerServer) CreateProfile(profile api.ProfilesPost) error {
	ret := _m.Called(profile)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ProfilesPost) error); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProject provides a mock function with given fields: project
func (_m *MockContainerServer) CreateProject(project api.ProjectsPost) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ProjectsPost) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStoragePool provides a mock function with given fields: pool
func (_m *MockContainerServer) CreateStoragePool(pool api.StoragePoolsPost) error {
	ret := _m.Called(pool)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePool")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.StoragePoolsPost) error); ok {
		r0 = rf(pool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStoragePoolBucket provides a mock function with given fields: poolName, bucket
func (_m *MockContainerServer) CreateStoragePoolBucket(poolName string, bucket api.StorageBucketsPost) (*api.StorageBucketKey, error) {
	ret := _m.Called(poolName, bucket)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolBucket")
	}

	var r0 *api.StorageBucketKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.StorageBucketsPost) (*api.StorageBucketKey, error)); ok {
		return rf(poolName, bucket)
	}
	if rf, ok := ret.Get(0).(func(string, api.StorageBucketsPost) *api.StorageBucketKey); ok {
		r0 = rf(poolName, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageBucketKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.StorageBucketsPost) error); ok {
		r1 = rf(poolName, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStoragePoolBucketKey provides a mock function with given fields: poolName, bucketName, key
func (_m *MockContainerServer) CreateStoragePoolBucketKey(poolName string, bucketName string, key api.StorageBucketKeysPost) (*api.StorageBucketKey, error) {
	ret := _m.Called(poolName, bucketName, key)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolBucketKey")
	}

	var r0 *api.StorageBucketKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.StorageBucketKeysPost) (*api.StorageBucketKey, error)); ok {
		return rf(poolName, bucketName, key)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.StorageBucketKeysPost) *api.StorageBucketKey); ok {
		r0 = rf(poolName, bucketName, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageBucketKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.StorageBucketKeysPost) error); ok {
		r1 = rf(poolName, bucketName, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStoragePoolVolume provides a mock function with given fields: pool, volume
func (_m *MockContainerServer) CreateStoragePoolVolume(pool string, volume api.StorageVolumesPost) error {
	ret := _m.Called(pool, volume)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.StorageVolumesPost) error); ok {
		r0 = rf(pool, volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStoragePoolVolumeBackup provides a mock function with given fields: pool, volName, backup
func (_m *MockContainerServer) CreateStoragePoolVolumeBackup(pool string, volName string, backup api.StoragePoolVolumeBackupsPost) (lxd.Operation, error) {
	ret := _m.Called(pool, volName, backup)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolVolumeBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.StoragePoolVolumeBackupsPost) (lxd.Operation, error)); ok {
		return rf(pool, volName, backup)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.StoragePoolVolumeBackupsPost) lxd.Operation); ok {
		r0 = rf(pool, volName, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.StoragePoolVolumeBackupsPost) error); ok {
		r1 = rf(pool, volName, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStoragePoolVolumeFromBackup provides a mock function with given fields: pool, args
func (_m *MockContainerServer) CreateStoragePoolVolumeFromBackup(pool string, args lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	ret := _m.Called(pool, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolVolumeFromBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error)); ok {
		return rf(pool, args)
	}
	if rf, ok := ret.Get(0).(func(string, lxd.StoragePoolVolumeBackupArgs) lxd.Operation); ok {
		r0 = rf(pool, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lxd.StoragePoolVolumeBackupArgs) error); ok {
		r1 = rf(pool, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStoragePoolVolumeFromISO provides a mock function with given fields: pool, args
func (_m *MockContainerServer) CreateStoragePoolVolumeFromISO(pool string, args lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	ret := _m.Called(pool, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolVolumeFromISO")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error)); ok {
		return rf(pool, args)
	}
	if rf, ok := ret.Get(0).(func(string, lxd.StoragePoolVolumeBackupArgs) lxd.Operation); ok {
		r0 = rf(pool, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lxd.StoragePoolVolumeBackupArgs) error); ok {
		r1 = rf(pool, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStoragePoolVolumeSnapshot provides a mock function with given fields: pool, volumeType, volumeName, snapshot
func (_m *MockContainerServer) CreateStoragePoolVolumeSnapshot(pool string, volumeType string, volumeName string, snapshot api.StorageVolumeSnapshotsPost) (lxd.Operation, error) {
	ret := _m.Called(pool, volumeType, volumeName, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoragePoolVolumeSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, api.StorageVolumeSnapshotsPost) (lxd.Operation, error)); ok {
		return rf(pool, volumeType, volumeName, snapshot)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, api.StorageVolumeSnapshotsPost) lxd.Operation); ok {
		r0 = rf(pool, volumeType, volumeName, snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, api.StorageVolumeSnapshotsPost) error); ok {
		r1 = rf(pool, volumeType, volumeName, snapshot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthGroup provides a mock function with given fields: groupName
func (_m *MockContainerServer) DeleteAuthGroup(groupName string) error {
	ret := _m.Called(groupName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCertificate provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) DeleteCertificate(fingerprint string) error {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fingerprint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClusterGroup provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteClusterGroup(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClusterMember provides a mock function with given fields: name, force
func (_m *MockContainerServer) DeleteClusterMember(name string, force bool) error {
	ret := _m.Called(name, force)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(name, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContainer provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteContainer(name string) (lxd.Operation, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (lxd.Operation, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) lxd.Operation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerBackup provides a mock function with given fields: containerName, name
func (_m *MockContainerServer) DeleteContainerBackup(containerName string, name string) (lxd.Operation, error) {
	ret := _m.Called(containerName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (lxd.Operation, error)); ok {
		return rf(containerName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) lxd.Operation); ok {
		r0 = rf(containerName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(containerName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerConsoleLog provides a mock function with given fields: containerName, args
func (_m *MockContainerServer) DeleteContainerConsoleLog(containerName string, args *lxd.ContainerConsoleLogArgs) error {
	ret := _m.Called(containerName, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerConsoleLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *lxd.ContainerConsoleLogArgs) error); ok {
		r0 = rf(containerName, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContainerFile provides a mock function with given fields: containerName, path
func (_m *MockContainerServer) DeleteContainerFile(containerName string, path string) error {
	ret := _m.Called(containerName, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(containerName, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContainerLogfile provides a mock function with given fields: name, filename
func (_m *MockContainerServer) DeleteContainerLogfile(name string, filename string) error {
	ret := _m.Called(name, filename)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerLogfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContainerSnapshot provides a mock function with given fields: containerName, name
func (_m *MockContainerServer) DeleteContainerSnapshot(containerName string, name string) (lxd.Operation, error) {
	ret := _m.Called(containerName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (lxd.Operation, error)); ok {
		return rf(containerName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) lxd.Operation); ok {
		r0 = rf(containerName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(containerName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerTemplateFile provides a mock function with given fields: name, templateName
func (_m *MockContainerServer) DeleteContainerTemplateFile(name string, templateName string) error {
	ret := _m.Called(name, templateName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerTemplateFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, templateName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIdentity provides a mock function with given fields: authenticationMethod, nameOrIdentifier
func (_m *MockContainerServer) DeleteIdentity(authenticationMethod string, nameOrIdentifier string) error {
	ret := _m.Called(authenticationMethod, nameOrIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(authenticationMethod, nameOrIdentifier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIdentityProviderGroup provides a mock function with given fields: identityProviderGroupName
func (_m *MockContainerServer) DeleteIdentityProviderGroup(identityProviderGroupName string) error {
	ret := _m.Called(identityProviderGroupName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityProviderGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(identityProviderGroupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImage provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) DeleteImage(fingerprint string) (lxd.Operation, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (lxd.Operation, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) lxd.Operation); ok {
		r0 = rf(fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImageAlias provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteImageAlias(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInstance provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteInstance(name string) (lxd.Operation, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (lxd.Operation, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) lxd.Operation); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceBackup provides a mock function with given fields: instanceName, name
func (_m *MockContainerServer) DeleteInstanceBackup(instanceName string, name string) (lxd.Operation, error) {
	ret := _m.Called(instanceName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (lxd.Operation, error)); ok {
		return rf(instanceName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) lxd.Operation); ok {
		r0 = rf(instanceName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(instanceName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceConsoleLog provides a mock function with given fields: instanceName, args
func (_m *MockContainerServer) DeleteInstanceConsoleLog(instanceName string, args *lxd.InstanceConsoleLogArgs) error {
	ret := _m.Called(instanceName, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceConsoleLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *lxd.InstanceConsoleLogArgs) error); ok {
		r0 = rf(instanceName, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInstanceFile provides a mock function with given fields: instanceName, path
func (_m *MockContainerServer) DeleteInstanceFile(instanceName string, path string) error {
	ret := _m.Called(instanceName, path)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(instanceName, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInstanceLogfile provides a mock function with given fields: name, filename
func (_m *MockContainerServer) DeleteInstanceLogfile(name string, filename string) error {
	ret := _m.Called(name, filename)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceLogfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInstanceSnapshot provides a mock function with given fields: instanceName, name
func (_m *MockContainerServer) DeleteInstanceSnapshot(instanceName string, name string) (lxd.Operation, error) {
	ret := _m.Called(instanceName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (lxd.Operation, error)); ok {
		return rf(instanceName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) lxd.Operation); ok {
		r0 = rf(instanceName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(instanceName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceTemplateFile provides a mock function with given fields: name, templateName
func (_m *MockContainerServer) DeleteInstanceTemplateFile(name string, templateName string) error {
	ret := _m.Called(name, templateName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceTemplateFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, templateName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetwork provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteNetwork(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetworkACL provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteNetworkACL(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkACL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetworkForward provides a mock function with given fields: networkName, listenAddress
func (_m *MockContainerServer) DeleteNetworkForward(networkName string, listenAddress string) error {
	ret := _m.Called(networkName, listenAddress)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkForward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(networkName, listenAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetworkLoadBalancer provides a mock function with given fields: networkName, listenAddress
func (_m *MockContainerServer) DeleteNetworkLoadBalancer(networkName string, listenAddress string) error {
	ret := _m.Called(networkName, listenAddress)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkLoadBalancer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(networkName, listenAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetworkPeer provides a mock function with given fields: networkName, peerName
func (_m *MockContainerServer) DeleteNetworkPeer(networkName string, peerName string) error {
	ret := _m.Called(networkName, peerName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkPeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(networkName, peerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetworkZone provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteNetworkZone(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkZone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetworkZoneRecord provides a mock function with given fields: zone, name
func (_m *MockContainerServer) DeleteNetworkZoneRecord(zone string, name string) error {
	ret := _m.Called(zone, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkZoneRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(zone, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOperation provides a mock function with given fields: uuid
func (_m *MockContainerServer) DeleteOperation(uuid string) error {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProfile provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteProfile(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteProject(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStoragePool provides a mock function with given fields: name
func (_m *MockContainerServer) DeleteStoragePool(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoragePool")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStoragePoolBucket provides a mock function with given fields: poolName, bucketName
func (_m *MockContainerServer) DeleteStoragePoolBucket(poolName string, bucketName string) error {
	ret := _m.Called(poolName, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoragePoolBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(poolName, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStoragePoolBucketKey provides a mock function with given fields: poolName, bucketName, keyName
func (_m *MockContainerServer) DeleteStoragePoolBucketKey(poolName string, bucketName string, keyName string) error {
	ret := _m.Called(poolName, bucketName, keyName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoragePoolBucketKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(poolName, bucketName, keyName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStoragePoolVolume provides a mock function with given fields: pool, volType, name
func (_m *MockContainerServer) DeleteStoragePoolVolume(pool string, volType string, name string) error {
	ret := _m.Called(pool, volType, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoragePoolVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(pool, volType, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStoragePoolVolumeBackup provides a mock function with given fields: pool, volName, name
func (_m *MockContainerServer) DeleteStoragePoolVolumeBackup(pool string, volName string, name string) (lxd.Operation, error) {
	ret := _m.Called(pool, volName, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoragePoolVolumeBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (lxd.Operation, error)); ok {
		return rf(pool, volName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) lxd.Operation); ok {
		r0 = rf(pool, volName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(pool, volName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStoragePoolVolumeSnapshot provides a mock function with given fields: pool, volumeType, volumeName, snapshotName
func (_m *MockContainerServer) DeleteStoragePoolVolumeSnapshot(pool string, volumeType string, volumeName string, snapshotName string) (lxd.Operation, error) {
	ret := _m.Called(pool, volumeType, volumeName, snapshotName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoragePoolVolumeSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (lxd.Operation, error)); ok {
		return rf(pool, volumeType, volumeName, snapshotName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) lxd.Operation); ok {
		r0 = rf(pool, volumeType, volumeName, snapshotName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(pool, volumeType, volumeName, snapshotName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWarning provides a mock function with given fields: UUID
func (_m *MockContainerServer) DeleteWarning(UUID string) error {
	ret := _m.Called(UUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWarning")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(UUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with no fields
func (_m *MockContainerServer) Disconnect() {
	_m.Called()
}

// DoHTTP provides a mock function with given fields: req
func (_m *MockContainerServer) DoHTTP(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DoHTTP")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecContainer provides a mock function with given fields: containerName, exec, args
func (_m *MockContainerServer) ExecContainer(containerName string, exec api.ContainerExecPost, args *lxd.ContainerExecArgs) (lxd.Operation, error) {
	ret := _m.Called(containerName, exec, args)

	if len(ret) == 0 {
		panic("no return value specified for ExecContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerExecPost, *lxd.ContainerExecArgs) (lxd.Operation, error)); ok {
		return rf(containerName, exec, args)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerExecPost, *lxd.ContainerExecArgs) lxd.Operation); ok {
		r0 = rf(containerName, exec, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerExecPost, *lxd.ContainerExecArgs) error); ok {
		r1 = rf(containerName, exec, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecInstance provides a mock function with given fields: instanceName, exec, args
func (_m *MockContainerServer) ExecInstance(instanceName string, exec api.InstanceExecPost, args *lxd.InstanceExecArgs) (lxd.Operation, error) {
	ret := _m.Called(instanceName, exec, args)

	if len(ret) == 0 {
		panic("no return value specified for ExecInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceExecPost, *lxd.InstanceExecArgs) (lxd.Operation, error)); ok {
		return rf(instanceName, exec, args)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceExecPost, *lxd.InstanceExecArgs) lxd.Operation); ok {
		r0 = rf(instanceName, exec, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceExecPost, *lxd.InstanceExecArgs) error); ok {
		r1 = rf(instanceName, exec, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportImage provides a mock function with given fields: fingerprint, image
func (_m *MockContainerServer) ExportImage(fingerprint string, image api.ImageExportPost) (lxd.Operation, error) {
	ret := _m.Called(fingerprint, image)

	if len(ret) == 0 {
		panic("no return value specified for ExportImage")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ImageExportPost) (lxd.Operation, error)); ok {
		return rf(fingerprint, image)
	}
	if rf, ok := ret.Get(0).(func(string, api.ImageExportPost) lxd.Operation); ok {
		r0 = rf(fingerprint, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ImageExportPost) error); ok {
		r1 = rf(fingerprint, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthGroup provides a mock function with given fields: groupName
func (_m *MockContainerServer) GetAuthGroup(groupName string) (*api.AuthGroup, string, error) {
	ret := _m.Called(groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthGroup")
	}

	var r0 *api.AuthGroup
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.AuthGroup, string, error)); ok {
		return rf(groupName)
	}
	if rf, ok := ret.Get(0).(func(string) *api.AuthGroup); ok {
		r0 = rf(groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AuthGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(groupName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(groupName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAuthGroupNames provides a mock function with no fields
func (_m *MockContainerServer) GetAuthGroupNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthGroupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthGroups provides a mock function with no fields
func (_m *MockContainerServer) GetAuthGroups() ([]api.AuthGroup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthGroups")
	}

	var r0 []api.AuthGroup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.AuthGroup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.AuthGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.AuthGroup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificate provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) GetCertificate(fingerprint string) (*api.Certificate, string, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 *api.Certificate
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Certificate, string, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Certificate); ok {
		r0 = rf(fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fingerprint)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCertificateFingerprints provides a mock function with no fields
func (_m *MockContainerServer) GetCertificateFingerprints() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificateFingerprints")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificates provides a mock function with no fields
func (_m *MockContainerServer) GetCertificates() ([]api.Certificate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCertificates")
	}

	var r0 []api.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Certificate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Certificate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Certificate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with no fields
func (_m *MockContainerServer) GetCluster() (*api.Cluster, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *api.Cluster
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (*api.Cluster, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClusterGroup provides a mock function with given fields: name
func (_m *MockContainerServer) GetClusterGroup(name string) (*api.ClusterGroup, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGroup")
	}

	var r0 *api.ClusterGroup
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ClusterGroup, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ClusterGroup); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ClusterGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClusterGroupNames provides a mock function with no fields
func (_m *MockContainerServer) GetClusterGroupNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGroupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterGroups provides a mock function with no fields
func (_m *MockContainerServer) GetClusterGroups() ([]api.ClusterGroup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterGroups")
	}

	var r0 []api.ClusterGroup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.ClusterGroup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.ClusterGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ClusterGroup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterMember provides a mock function with given fields: name
func (_m *MockContainerServer) GetClusterMember(name string) (*api.ClusterMember, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterMember")
	}

	var r0 *api.ClusterMember
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ClusterMember, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ClusterMember); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ClusterMember)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClusterMemberNames provides a mock function with no fields
func (_m *MockContainerServer) GetClusterMemberNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterMemberNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterMemberState provides a mock function with given fields: name
func (_m *MockContainerServer) GetClusterMemberState(name string) (*api.ClusterMemberState, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterMemberState")
	}

	var r0 *api.ClusterMemberState
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ClusterMemberState, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ClusterMemberState); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ClusterMemberState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetClusterMembers provides a mock function with no fields
func (_m *MockContainerServer) GetClusterMembers() ([]api.ClusterMember, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClusterMembers")
	}

	var r0 []api.ClusterMember
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.ClusterMember, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.ClusterMember); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ClusterMember)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionInfo provides a mock function with no fields
func (_m *MockContainerServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionInfo")
	}

	var r0 *lxd.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*lxd.ConnectionInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *lxd.ConnectionInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainer provides a mock function with given fields: name
func (_m *MockContainerServer) GetContainer(name string) (*api.Container, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetContainer")
	}

	var r0 *api.Container
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Container, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Container); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContainerBackup provides a mock function with given fields: containerName, name
func (_m *MockContainerServer) GetContainerBackup(containerName string, name string) (*api.ContainerBackup, string, error) {
	ret := _m.Called(containerName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerBackup")
	}

	var r0 *api.ContainerBackup
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.ContainerBackup, string, error)); ok {
		return rf(containerName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.ContainerBackup); ok {
		r0 = rf(containerName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ContainerBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(containerName, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(containerName, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContainerBackupFile provides a mock function with given fields: containerName, name, req
func (_m *MockContainerServer) GetContainerBackupFile(containerName string, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	ret := _m.Called(containerName, name, req)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerBackupFile")
	}

	var r0 *lxd.BackupFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)); ok {
		return rf(containerName, name, req)
	}
	if rf, ok := ret.Get(0).(func(string, string, *lxd.BackupFileRequest) *lxd.BackupFileResponse); ok {
		r0 = rf(containerName, name, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.BackupFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *lxd.BackupFileRequest) error); ok {
		r1 = rf(containerName, name, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerBackupNames provides a mock function with given fields: containerName
func (_m *MockContainerServer) GetContainerBackupNames(containerName string) ([]string, error) {
	ret := _m.Called(containerName)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerBackupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(containerName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(containerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerBackups provides a mock function with given fields: containername
func (_m *MockContainerServer) GetContainerBackups(containername string) ([]api.ContainerBackup, error) {
	ret := _m.Called(containername)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerBackups")
	}

	var r0 []api.ContainerBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.ContainerBackup, error)); ok {
		return rf(containername)
	}
	if rf, ok := ret.Get(0).(func(string) []api.ContainerBackup); ok {
		r0 = rf(containername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ContainerBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(containername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerConsoleLog provides a mock function with given fields: containerName, args
func (_m *MockContainerServer) GetContainerConsoleLog(containerName string, args *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error) {
	ret := _m.Called(containerName, args)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerConsoleLog")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error)); ok {
		return rf(containerName, args)
	}
	if rf, ok := ret.Get(0).(func(string, *lxd.ContainerConsoleLogArgs) io.ReadCloser); ok {
		r0 = rf(containerName, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *lxd.ContainerConsoleLogArgs) error); ok {
		r1 = rf(containerName, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerFile provides a mock function with given fields: containerName, path
func (_m *MockContainerServer) GetContainerFile(containerName string, path string) (io.ReadCloser, *lxd.ContainerFileResponse, error) {
	ret := _m.Called(containerName, path)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerFile")
	}

	var r0 io.ReadCloser
	var r1 *lxd.ContainerFileResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, *lxd.ContainerFileResponse, error)); ok {
		return rf(containerName, path)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(containerName, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *lxd.ContainerFileResponse); ok {
		r1 = rf(containerName, path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lxd.ContainerFileResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(containerName, path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContainerLogfile provides a mock function with given fields: name, filename
func (_m *MockContainerServer) GetContainerLogfile(name string, filename string) (io.ReadCloser, error) {
	ret := _m.Called(name, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerLogfile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, error)); ok {
		return rf(name, filename)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(name, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerLogfiles provides a mock function with given fields: name
func (_m *MockContainerServer) GetContainerLogfiles(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerLogfiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerMetadata provides a mock function with given fields: name
func (_m *MockContainerServer) GetContainerMetadata(name string) (*api.ImageMetadata, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerMetadata")
	}

	var r0 *api.ImageMetadata
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ImageMetadata, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ImageMetadata); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ImageMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContainerNames provides a mock function with no fields
func (_m *MockContainerServer) GetContainerNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerSnapshot provides a mock function with given fields: containerName, name
func (_m *MockContainerServer) GetContainerSnapshot(containerName string, name string) (*api.ContainerSnapshot, string, error) {
	ret := _m.Called(containerName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerSnapshot")
	}

	var r0 *api.ContainerSnapshot
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.ContainerSnapshot, string, error)); ok {
		return rf(containerName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.ContainerSnapshot); ok {
		r0 = rf(containerName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ContainerSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(containerName, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(containerName, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContainerSnapshotNames provides a mock function with given fields: containerName
func (_m *MockContainerServer) GetContainerSnapshotNames(containerName string) ([]string, error) {
	ret := _m.Called(containerName)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerSnapshotNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(containerName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(containerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerSnapshots provides a mock function with given fields: containerName
func (_m *MockContainerServer) GetContainerSnapshots(containerName string) ([]api.ContainerSnapshot, error) {
	ret := _m.Called(containerName)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerSnapshots")
	}

	var r0 []api.ContainerSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.ContainerSnapshot, error)); ok {
		return rf(containerName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.ContainerSnapshot); ok {
		r0 = rf(containerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ContainerSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerState provides a mock function with given fields: name
func (_m *MockContainerServer) GetContainerState(name string) (*api.ContainerState, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerState")
	}

	var r0 *api.ContainerState
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ContainerState, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ContainerState); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ContainerState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContainerTemplateFile provides a mock function with given fields: containerName, templateName
func (_m *MockContainerServer) GetContainerTemplateFile(containerName string, templateName string) (io.ReadCloser, error) {
	ret := _m.Called(containerName, templateName)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerTemplateFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, error)); ok {
		return rf(containerName, templateName)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(containerName, templateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(containerName, templateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerTemplateFiles provides a mock function with given fields: containerName
func (_m *MockContainerServer) GetContainerTemplateFiles(containerName string) ([]string, error) {
	ret := _m.Called(containerName)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerTemplateFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(containerName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(containerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainers provides a mock function with no fields
func (_m *MockContainerServer) GetContainers() ([]api.Container, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainers")
	}

	var r0 []api.Container
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Container, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Container); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Container)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainersFull provides a mock function with no fields
func (_m *MockContainerServer) GetContainersFull() ([]api.ContainerFull, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainersFull")
	}

	var r0 []api.ContainerFull
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.ContainerFull, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.ContainerFull); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ContainerFull)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentIdentityInfo provides a mock function with no fields
func (_m *MockContainerServer) GetCurrentIdentityInfo() (*api.IdentityInfo, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentIdentityInfo")
	}

	var r0 *api.IdentityInfo
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (*api.IdentityInfo, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.IdentityInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.IdentityInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEvents provides a mock function with no fields
func (_m *MockContainerServer) GetEvents() (*lxd.EventListener, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 *lxd.EventListener
	var r1 error
	if rf, ok := ret.Get(0).(func() (*lxd.EventListener, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *lxd.EventListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.EventListener)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsAllProjects provides a mock function with no fields
func (_m *MockContainerServer) GetEventsAllProjects() (*lxd.EventListener, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEventsAllProjects")
	}

	var r0 *lxd.EventListener
	var r1 error
	if rf, ok := ret.Get(0).(func() (*lxd.EventListener, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *lxd.EventListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.EventListener)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHTTPClient provides a mock function with no fields
func (_m *MockContainerServer) GetHTTPClient() (*http.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPClient")
	}

	var r0 *http.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*http.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentities provides a mock function with no fields
func (_m *MockContainerServer) GetIdentities() ([]api.Identity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentities")
	}

	var r0 []api.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Identity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Identity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentitiesByAuthenticationMethod provides a mock function with given fields: authenticationMethod
func (_m *MockContainerServer) GetIdentitiesByAuthenticationMethod(authenticationMethod string) ([]api.Identity, error) {
	ret := _m.Called(authenticationMethod)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentitiesByAuthenticationMethod")
	}

	var r0 []api.Identity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.Identity, error)); ok {
		return rf(authenticationMethod)
	}
	if rf, ok := ret.Get(0).(func(string) []api.Identity); ok {
		r0 = rf(authenticationMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authenticationMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentity provides a mock function with given fields: authenticationMethod, nameOrIdentifier
func (_m *MockContainerServer) GetIdentity(authenticationMethod string, nameOrIdentifier string) (*api.Identity, string, error) {
	ret := _m.Called(authenticationMethod, nameOrIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentity")
	}

	var r0 *api.Identity
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.Identity, string, error)); ok {
		return rf(authenticationMethod, nameOrIdentifier)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.Identity); ok {
		r0 = rf(authenticationMethod, nameOrIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(authenticationMethod, nameOrIdentifier)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(authenticationMethod, nameOrIdentifier)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetIdentityAuthenticationMethodsIdentifiers provides a mock function with no fields
func (_m *MockContainerServer) GetIdentityAuthenticationMethodsIdentifiers() (map[string][]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityAuthenticationMethodsIdentifiers")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string][]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityIdentifiersByAuthenticationMethod provides a mock function with given fields: authenticationMethod
func (_m *MockContainerServer) GetIdentityIdentifiersByAuthenticationMethod(authenticationMethod string) ([]string, error) {
	ret := _m.Called(authenticationMethod)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityIdentifiersByAuthenticationMethod")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(authenticationMethod)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(authenticationMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(authenticationMethod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityProviderGroup provides a mock function with given fields: identityProviderGroupName
func (_m *MockContainerServer) GetIdentityProviderGroup(identityProviderGroupName string) (*api.IdentityProviderGroup, string, error) {
	ret := _m.Called(identityProviderGroupName)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderGroup")
	}

	var r0 *api.IdentityProviderGroup
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.IdentityProviderGroup, string, error)); ok {
		return rf(identityProviderGroupName)
	}
	if rf, ok := ret.Get(0).(func(string) *api.IdentityProviderGroup); ok {
		r0 = rf(identityProviderGroupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.IdentityProviderGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(identityProviderGroupName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(identityProviderGroupName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetIdentityProviderGroupNames provides a mock function with no fields
func (_m *MockContainerServer) GetIdentityProviderGroupNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderGroupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityProviderGroups provides a mock function with no fields
func (_m *MockContainerServer) GetIdentityProviderGroups() ([]api.IdentityProviderGroup, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderGroups")
	}

	var r0 []api.IdentityProviderGroup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.IdentityProviderGroup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.IdentityProviderGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.IdentityProviderGroup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) GetImage(fingerprint string) (*api.Image, string, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetImage")
	}

	var r0 *api.Image
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Image, string, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Image); ok {
		r0 = rf(fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fingerprint)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageAlias provides a mock function with given fields: name
func (_m *MockContainerServer) GetImageAlias(name string) (*api.ImageAliasesEntry, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetImageAlias")
	}

	var r0 *api.ImageAliasesEntry
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ImageAliasesEntry, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ImageAliasesEntry); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageAliasArchitectures provides a mock function with given fields: imageType, name
func (_m *MockContainerServer) GetImageAliasArchitectures(imageType string, name string) (map[string]*api.ImageAliasesEntry, error) {
	ret := _m.Called(imageType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliasArchitectures")
	}

	var r0 map[string]*api.ImageAliasesEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]*api.ImageAliasesEntry, error)); ok {
		return rf(imageType, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]*api.ImageAliasesEntry); ok {
		r0 = rf(imageType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(imageType, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageAliasNames provides a mock function with no fields
func (_m *MockContainerServer) GetImageAliasNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliasNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageAliasType provides a mock function with given fields: imageType, name
func (_m *MockContainerServer) GetImageAliasType(imageType string, name string) (*api.ImageAliasesEntry, string, error) {
	ret := _m.Called(imageType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliasType")
	}

	var r0 *api.ImageAliasesEntry
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.ImageAliasesEntry, string, error)); ok {
		return rf(imageType, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.ImageAliasesEntry); ok {
		r0 = rf(imageType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(imageType, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(imageType, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetImageAliases provides a mock function with no fields
func (_m *MockContainerServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageAliases")
	}

	var r0 []api.ImageAliasesEntry
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.ImageAliasesEntry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.ImageAliasesEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ImageAliasesEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageFile provides a mock function with given fields: fingerprint, req
func (_m *MockContainerServer) GetImageFile(fingerprint string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	ret := _m.Called(fingerprint, req)

	if len(ret) == 0 {
		panic("no return value specified for GetImageFile")
	}

	var r0 *lxd.ImageFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)); ok {
		return rf(fingerprint, req)
	}
	if rf, ok := ret.Get(0).(func(string, lxd.ImageFileRequest) *lxd.ImageFileResponse); ok {
		r0 = rf(fingerprint, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ImageFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lxd.ImageFileRequest) error); ok {
		r1 = rf(fingerprint, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageFingerprints provides a mock function with no fields
func (_m *MockContainerServer) GetImageFingerprints() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImageFingerprints")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageSecret provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) GetImageSecret(fingerprint string) (string, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for GetImageSecret")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(fingerprint)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImages provides a mock function with no fields
func (_m *MockContainerServer) GetImages() ([]api.Image, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImages")
	}

	var r0 []api.Image
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Image, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesAllProjects provides a mock function with no fields
func (_m *MockContainerServer) GetImagesAllProjects() ([]api.Image, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImagesAllProjects")
	}

	var r0 []api.Image
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Image, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Image); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesAllProjectsWithFilter provides a mock function with given fields: filters
func (_m *MockContainerServer) GetImagesAllProjectsWithFilter(filters []string) ([]api.Image, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetImagesAllProjectsWithFilter")
	}

	var r0 []api.Image
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]api.Image, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func([]string) []api.Image); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImagesWithFilter provides a mock function with given fields: filters
func (_m *MockContainerServer) GetImagesWithFilter(filters []string) ([]api.Image, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetImagesWithFilter")
	}

	var r0 []api.Image
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]api.Image, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func([]string) []api.Image); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: name
func (_m *MockContainerServer) GetInstance(name string) (*api.Instance, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *api.Instance
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Instance, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Instance); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceBackup provides a mock function with given fields: instanceName, name
func (_m *MockContainerServer) GetInstanceBackup(instanceName string, name string) (*api.InstanceBackup, string, error) {
	ret := _m.Called(instanceName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceBackup")
	}

	var r0 *api.InstanceBackup
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.InstanceBackup, string, error)); ok {
		return rf(instanceName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.InstanceBackup); ok {
		r0 = rf(instanceName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.InstanceBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(instanceName, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(instanceName, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceBackupFile provides a mock function with given fields: instanceName, name, req
func (_m *MockContainerServer) GetInstanceBackupFile(instanceName string, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	ret := _m.Called(instanceName, name, req)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceBackupFile")
	}

	var r0 *lxd.BackupFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)); ok {
		return rf(instanceName, name, req)
	}
	if rf, ok := ret.Get(0).(func(string, string, *lxd.BackupFileRequest) *lxd.BackupFileResponse); ok {
		r0 = rf(instanceName, name, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.BackupFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *lxd.BackupFileRequest) error); ok {
		r1 = rf(instanceName, name, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceBackupNames provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceBackupNames(instanceName string) ([]string, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceBackupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceBackups provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceBackups(instanceName string) ([]api.InstanceBackup, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceBackups")
	}

	var r0 []api.InstanceBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.InstanceBackup, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.InstanceBackup); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.InstanceBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceConsoleLog provides a mock function with given fields: instanceName, args
func (_m *MockContainerServer) GetInstanceConsoleLog(instanceName string, args *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	ret := _m.Called(instanceName, args)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceConsoleLog")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error)); ok {
		return rf(instanceName, args)
	}
	if rf, ok := ret.Get(0).(func(string, *lxd.InstanceConsoleLogArgs) io.ReadCloser); ok {
		r0 = rf(instanceName, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *lxd.InstanceConsoleLogArgs) error); ok {
		r1 = rf(instanceName, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceFile provides a mock function with given fields: instanceName, path
func (_m *MockContainerServer) GetInstanceFile(instanceName string, path string) (io.ReadCloser, *lxd.InstanceFileResponse, error) {
	ret := _m.Called(instanceName, path)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceFile")
	}

	var r0 io.ReadCloser
	var r1 *lxd.InstanceFileResponse
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, *lxd.InstanceFileResponse, error)); ok {
		return rf(instanceName, path)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(instanceName, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *lxd.InstanceFileResponse); ok {
		r1 = rf(instanceName, path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lxd.InstanceFileResponse)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(instanceName, path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceFileSFTP provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceFileSFTP(instanceName string) (*sftp.Client, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceFileSFTP")
	}

	var r0 *sftp.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sftp.Client, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) *sftp.Client); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sftp.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceFileSFTPConn provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceFileSFTPConn(instanceName string) (net.Conn, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceFileSFTPConn")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (net.Conn, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) net.Conn); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceFull provides a mock function with given fields: name
func (_m *MockContainerServer) GetInstanceFull(name string) (*api.InstanceFull, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceFull")
	}

	var r0 *api.InstanceFull
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.InstanceFull, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.InstanceFull); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.InstanceFull)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceLogfile provides a mock function with given fields: name, filename
func (_m *MockContainerServer) GetInstanceLogfile(name string, filename string) (io.ReadCloser, error) {
	ret := _m.Called(name, filename)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceLogfile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, error)); ok {
		return rf(name, filename)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(name, filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceLogfiles provides a mock function with given fields: name
func (_m *MockContainerServer) GetInstanceLogfiles(name string) ([]string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceLogfiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceMetadata provides a mock function with given fields: name
func (_m *MockContainerServer) GetInstanceMetadata(name string) (*api.ImageMetadata, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceMetadata")
	}

	var r0 *api.ImageMetadata
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.ImageMetadata, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ImageMetadata); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ImageMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceNames provides a mock function with given fields: instanceType
func (_m *MockContainerServer) GetInstanceNames(instanceType api.InstanceType) ([]string, error) {
	ret := _m.Called(instanceType)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType) ([]string, error)); ok {
		return rf(instanceType)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType) []string); ok {
		r0 = rf(instanceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType) error); ok {
		r1 = rf(instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceNamesAllProjects provides a mock function with given fields: instanceType
func (_m *MockContainerServer) GetInstanceNamesAllProjects(instanceType api.InstanceType) (map[string][]string, error) {
	ret := _m.Called(instanceType)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceNamesAllProjects")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType) (map[string][]string, error)); ok {
		return rf(instanceType)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType) map[string][]string); ok {
		r0 = rf(instanceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType) error); ok {
		r1 = rf(instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshot provides a mock function with given fields: instanceName, name
func (_m *MockContainerServer) GetInstanceSnapshot(instanceName string, name string) (*api.InstanceSnapshot, string, error) {
	ret := _m.Called(instanceName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceSnapshot")
	}

	var r0 *api.InstanceSnapshot
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.InstanceSnapshot, string, error)); ok {
		return rf(instanceName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.InstanceSnapshot); ok {
		r0 = rf(instanceName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.InstanceSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(instanceName, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(instanceName, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceSnapshotNames provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceSnapshotNames(instanceName string) ([]string, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceSnapshotNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshots provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceSnapshots(instanceName string) ([]api.InstanceSnapshot, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceSnapshots")
	}

	var r0 []api.InstanceSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.InstanceSnapshot, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.InstanceSnapshot); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.InstanceSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceState provides a mock function with given fields: name
func (_m *MockContainerServer) GetInstanceState(name string) (*api.InstanceState, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceState")
	}

	var r0 *api.InstanceState
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.InstanceState, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.InstanceState); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.InstanceState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstanceTemplateFile provides a mock function with given fields: instanceName, templateName
func (_m *MockContainerServer) GetInstanceTemplateFile(instanceName string, templateName string) (io.ReadCloser, error) {
	ret := _m.Called(instanceName, templateName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceTemplateFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, error)); ok {
		return rf(instanceName, templateName)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(instanceName, templateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(instanceName, templateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceTemplateFiles provides a mock function with given fields: instanceName
func (_m *MockContainerServer) GetInstanceTemplateFiles(instanceName string) ([]string, error) {
	ret := _m.Called(instanceName)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceTemplateFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(instanceName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(instanceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceUEFIVars provides a mock function with given fields: name
func (_m *MockContainerServer) GetInstanceUEFIVars(name string) (*api.InstanceUEFIVars, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceUEFIVars")
	}

	var r0 *api.InstanceUEFIVars
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.InstanceUEFIVars, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.InstanceUEFIVars); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.InstanceUEFIVars)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInstances provides a mock function with given fields: instanceType
func (_m *MockContainerServer) GetInstances(instanceType api.InstanceType) ([]api.Instance, error) {
	ret := _m.Called(instanceType)

	if len(ret) == 0 {
		panic("no return value specified for GetInstances")
	}

	var r0 []api.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType) ([]api.Instance, error)); ok {
		return rf(instanceType)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType) []api.Instance); ok {
		r0 = rf(instanceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType) error); ok {
		r1 = rf(instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesAllProjects provides a mock function with given fields: instanceType
func (_m *MockContainerServer) GetInstancesAllProjects(instanceType api.InstanceType) ([]api.Instance, error) {
	ret := _m.Called(instanceType)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesAllProjects")
	}

	var r0 []api.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType) ([]api.Instance, error)); ok {
		return rf(instanceType)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType) []api.Instance); ok {
		r0 = rf(instanceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType) error); ok {
		r1 = rf(instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesAllProjectsWithFilter provides a mock function with given fields: instanceType, filters
func (_m *MockContainerServer) GetInstancesAllProjectsWithFilter(instanceType api.InstanceType, filters []string) ([]api.Instance, error) {
	ret := _m.Called(instanceType, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesAllProjectsWithFilter")
	}

	var r0 []api.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) ([]api.Instance, error)); ok {
		return rf(instanceType, filters)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) []api.Instance); ok {
		r0 = rf(instanceType, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType, []string) error); ok {
		r1 = rf(instanceType, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesFull provides a mock function with given fields: instanceType
func (_m *MockContainerServer) GetInstancesFull(instanceType api.InstanceType) ([]api.InstanceFull, error) {
	ret := _m.Called(instanceType)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesFull")
	}

	var r0 []api.InstanceFull
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType) ([]api.InstanceFull, error)); ok {
		return rf(instanceType)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType) []api.InstanceFull); ok {
		r0 = rf(instanceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.InstanceFull)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType) error); ok {
		r1 = rf(instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesFullAllProjects provides a mock function with given fields: instanceType
func (_m *MockContainerServer) GetInstancesFullAllProjects(instanceType api.InstanceType) ([]api.InstanceFull, error) {
	ret := _m.Called(instanceType)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesFullAllProjects")
	}

	var r0 []api.InstanceFull
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType) ([]api.InstanceFull, error)); ok {
		return rf(instanceType)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType) []api.InstanceFull); ok {
		r0 = rf(instanceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.InstanceFull)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType) error); ok {
		r1 = rf(instanceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesFullAllProjectsWithFilter provides a mock function with given fields: instanceType, filters
func (_m *MockContainerServer) GetInstancesFullAllProjectsWithFilter(instanceType api.InstanceType, filters []string) ([]api.InstanceFull, error) {
	ret := _m.Called(instanceType, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesFullAllProjectsWithFilter")
	}

	var r0 []api.InstanceFull
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) ([]api.InstanceFull, error)); ok {
		return rf(instanceType, filters)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) []api.InstanceFull); ok {
		r0 = rf(instanceType, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.InstanceFull)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType, []string) error); ok {
		r1 = rf(instanceType, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesFullWithFilter provides a mock function with given fields: instanceType, filters
func (_m *MockContainerServer) GetInstancesFullWithFilter(instanceType api.InstanceType, filters []string) ([]api.InstanceFull, error) {
	ret := _m.Called(instanceType, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesFullWithFilter")
	}

	var r0 []api.InstanceFull
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) ([]api.InstanceFull, error)); ok {
		return rf(instanceType, filters)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) []api.InstanceFull); ok {
		r0 = rf(instanceType, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.InstanceFull)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType, []string) error); ok {
		r1 = rf(instanceType, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancesWithFilter provides a mock function with given fields: instanceType, filters
func (_m *MockContainerServer) GetInstancesWithFilter(instanceType api.InstanceType, filters []string) ([]api.Instance, error) {
	ret := _m.Called(instanceType, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancesWithFilter")
	}

	var r0 []api.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) ([]api.Instance, error)); ok {
		return rf(instanceType, filters)
	}
	if rf, ok := ret.Get(0).(func(api.InstanceType, []string) []api.Instance); ok {
		r0 = rf(instanceType, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstanceType, []string) error); ok {
		r1 = rf(instanceType, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataConfiguration provides a mock function with no fields
func (_m *MockContainerServer) GetMetadataConfiguration() (*api.MetadataConfiguration, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataConfiguration")
	}

	var r0 *api.MetadataConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.MetadataConfiguration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.MetadataConfiguration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.MetadataConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with no fields
func (_m *MockContainerServer) GetMetrics() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: name
func (_m *MockContainerServer) GetNetwork(name string) (*api.Network, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *api.Network
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Network, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Network); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Network)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkACL provides a mock function with given fields: name
func (_m *MockContainerServer) GetNetworkACL(name string) (*api.NetworkACL, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkACL")
	}

	var r0 *api.NetworkACL
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.NetworkACL, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.NetworkACL); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkACL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkACLLogfile provides a mock function with given fields: name
func (_m *MockContainerServer) GetNetworkACLLogfile(name string) (io.ReadCloser, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkACLLogfile")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkACLNames provides a mock function with no fields
func (_m *MockContainerServer) GetNetworkACLNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkACLNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkACLs provides a mock function with no fields
func (_m *MockContainerServer) GetNetworkACLs() ([]api.NetworkACL, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkACLs")
	}

	var r0 []api.NetworkACL
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.NetworkACL, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.NetworkACL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkACL)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkAllocations provides a mock function with given fields: allProjects
func (_m *MockContainerServer) GetNetworkAllocations(allProjects bool) ([]api.NetworkAllocations, error) {
	ret := _m.Called(allProjects)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkAllocations")
	}

	var r0 []api.NetworkAllocations
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) ([]api.NetworkAllocations, error)); ok {
		return rf(allProjects)
	}
	if rf, ok := ret.Get(0).(func(bool) []api.NetworkAllocations); ok {
		r0 = rf(allProjects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkAllocations)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(allProjects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkForward provides a mock function with given fields: networkName, listenAddress
func (_m *MockContainerServer) GetNetworkForward(networkName string, listenAddress string) (*api.NetworkForward, string, error) {
	ret := _m.Called(networkName, listenAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkForward")
	}

	var r0 *api.NetworkForward
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.NetworkForward, string, error)); ok {
		return rf(networkName, listenAddress)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.NetworkForward); ok {
		r0 = rf(networkName, listenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkForward)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(networkName, listenAddress)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(networkName, listenAddress)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkForwardAddresses provides a mock function with given fields: networkName
func (_m *MockContainerServer) GetNetworkForwardAddresses(networkName string) ([]string, error) {
	ret := _m.Called(networkName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkForwardAddresses")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(networkName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(networkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkForwards provides a mock function with given fields: networkName
func (_m *MockContainerServer) GetNetworkForwards(networkName string) ([]api.NetworkForward, error) {
	ret := _m.Called(networkName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkForwards")
	}

	var r0 []api.NetworkForward
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.NetworkForward, error)); ok {
		return rf(networkName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.NetworkForward); ok {
		r0 = rf(networkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkForward)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkLeases provides a mock function with given fields: name
func (_m *MockContainerServer) GetNetworkLeases(name string) ([]api.NetworkLease, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkLeases")
	}

	var r0 []api.NetworkLease
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.NetworkLease, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []api.NetworkLease); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkLease)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkLoadBalancer provides a mock function with given fields: networkName, listenAddress
func (_m *MockContainerServer) GetNetworkLoadBalancer(networkName string, listenAddress string) (*api.NetworkLoadBalancer, string, error) {
	ret := _m.Called(networkName, listenAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkLoadBalancer")
	}

	var r0 *api.NetworkLoadBalancer
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.NetworkLoadBalancer, string, error)); ok {
		return rf(networkName, listenAddress)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.NetworkLoadBalancer); ok {
		r0 = rf(networkName, listenAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkLoadBalancer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(networkName, listenAddress)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(networkName, listenAddress)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkLoadBalancerAddresses provides a mock function with given fields: networkName
func (_m *MockContainerServer) GetNetworkLoadBalancerAddresses(networkName string) ([]string, error) {
	ret := _m.Called(networkName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkLoadBalancerAddresses")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(networkName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(networkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkLoadBalancers provides a mock function with given fields: networkName
func (_m *MockContainerServer) GetNetworkLoadBalancers(networkName string) ([]api.NetworkLoadBalancer, error) {
	ret := _m.Called(networkName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkLoadBalancers")
	}

	var r0 []api.NetworkLoadBalancer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.NetworkLoadBalancer, error)); ok {
		return rf(networkName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.NetworkLoadBalancer); ok {
		r0 = rf(networkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkLoadBalancer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkNames provides a mock function with no fields
func (_m *MockContainerServer) GetNetworkNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkPeer provides a mock function with given fields: networkName, peerName
func (_m *MockContainerServer) GetNetworkPeer(networkName string, peerName string) (*api.NetworkPeer, string, error) {
	ret := _m.Called(networkName, peerName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPeer")
	}

	var r0 *api.NetworkPeer
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.NetworkPeer, string, error)); ok {
		return rf(networkName, peerName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.NetworkPeer); ok {
		r0 = rf(networkName, peerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(networkName, peerName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(networkName, peerName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkPeerNames provides a mock function with given fields: networkName
func (_m *MockContainerServer) GetNetworkPeerNames(networkName string) ([]string, error) {
	ret := _m.Called(networkName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPeerNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(networkName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(networkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkPeers provides a mock function with given fields: networkName
func (_m *MockContainerServer) GetNetworkPeers(networkName string) ([]api.NetworkPeer, error) {
	ret := _m.Called(networkName)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkPeers")
	}

	var r0 []api.NetworkPeer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.NetworkPeer, error)); ok {
		return rf(networkName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.NetworkPeer); ok {
		r0 = rf(networkName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(networkName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkState provides a mock function with given fields: name
func (_m *MockContainerServer) GetNetworkState(name string) (*api.NetworkState, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkState")
	}

	var r0 *api.NetworkState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.NetworkState, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.NetworkState); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkZone provides a mock function with given fields: name
func (_m *MockContainerServer) GetNetworkZone(name string) (*api.NetworkZone, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZone")
	}

	var r0 *api.NetworkZone
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.NetworkZone, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.NetworkZone); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkZone)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkZoneNames provides a mock function with no fields
func (_m *MockContainerServer) GetNetworkZoneNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZoneNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkZoneRecord provides a mock function with given fields: zone, name
func (_m *MockContainerServer) GetNetworkZoneRecord(zone string, name string) (*api.NetworkZoneRecord, string, error) {
	ret := _m.Called(zone, name)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZoneRecord")
	}

	var r0 *api.NetworkZoneRecord
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.NetworkZoneRecord, string, error)); ok {
		return rf(zone, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.NetworkZoneRecord); ok {
		r0 = rf(zone, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.NetworkZoneRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(zone, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(zone, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetNetworkZoneRecordNames provides a mock function with given fields: zone
func (_m *MockContainerServer) GetNetworkZoneRecordNames(zone string) ([]string, error) {
	ret := _m.Called(zone)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZoneRecordNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(zone)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkZoneRecords provides a mock function with given fields: zone
func (_m *MockContainerServer) GetNetworkZoneRecords(zone string) ([]api.NetworkZoneRecord, error) {
	ret := _m.Called(zone)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZoneRecords")
	}

	var r0 []api.NetworkZoneRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.NetworkZoneRecord, error)); ok {
		return rf(zone)
	}
	if rf, ok := ret.Get(0).(func(string) []api.NetworkZoneRecord); ok {
		r0 = rf(zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkZoneRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkZones provides a mock function with no fields
func (_m *MockContainerServer) GetNetworkZones() ([]api.NetworkZone, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZones")
	}

	var r0 []api.NetworkZone
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.NetworkZone, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.NetworkZone); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkZone)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkZonesAllProjects provides a mock function with no fields
func (_m *MockContainerServer) GetNetworkZonesAllProjects() ([]api.NetworkZone, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkZonesAllProjects")
	}

	var r0 []api.NetworkZone
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.NetworkZone, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.NetworkZone); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.NetworkZone)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworks provides a mock function with no fields
func (_m *MockContainerServer) GetNetworks() ([]api.Network, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworks")
	}

	var r0 []api.Network
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Network, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Network); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Network)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: uuid
func (_m *MockContainerServer) GetOperation(uuid string) (*api.Operation, string, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOperation")
	}

	var r0 *api.Operation
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Operation, string, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Operation); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(uuid)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOperationUUIDs provides a mock function with no fields
func (_m *MockContainerServer) GetOperationUUIDs() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOperationUUIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationWait provides a mock function with given fields: uuid, timeout
func (_m *MockContainerServer) GetOperationWait(uuid string, timeout int) (*api.Operation, string, error) {
	ret := _m.Called(uuid, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationWait")
	}

	var r0 *api.Operation
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int) (*api.Operation, string, error)); ok {
		return rf(uuid, timeout)
	}
	if rf, ok := ret.Get(0).(func(string, int) *api.Operation); ok {
		r0 = rf(uuid, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) string); ok {
		r1 = rf(uuid, timeout)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(uuid, timeout)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOperationWaitSecret provides a mock function with given fields: uuid, secret, timeout
func (_m *MockContainerServer) GetOperationWaitSecret(uuid string, secret string, timeout int) (*api.Operation, string, error) {
	ret := _m.Called(uuid, secret, timeout)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationWaitSecret")
	}

	var r0 *api.Operation
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int) (*api.Operation, string, error)); ok {
		return rf(uuid, secret, timeout)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) *api.Operation); ok {
		r0 = rf(uuid, secret, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int) string); ok {
		r1 = rf(uuid, secret, timeout)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(uuid, secret, timeout)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOperationWebsocket provides a mock function with given fields: uuid, secret
func (_m *MockContainerServer) GetOperationWebsocket(uuid string, secret string) (*websocket.Conn, error) {
	ret := _m.Called(uuid, secret)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationWebsocket")
	}

	var r0 *websocket.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*websocket.Conn, error)); ok {
		return rf(uuid, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) *websocket.Conn); ok {
		r0 = rf(uuid, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uuid, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperations provides a mock function with no fields
func (_m *MockContainerServer) GetOperations() ([]api.Operation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 []api.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Operation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Operation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationsAllProjects provides a mock function with no fields
func (_m *MockContainerServer) GetOperationsAllProjects() ([]api.Operation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOperationsAllProjects")
	}

	var r0 []api.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Operation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Operation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: args
func (_m *MockContainerServer) GetPermissions(args lxd.GetPermissionsArgs) ([]api.Permission, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 []api.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.GetPermissionsArgs) ([]api.Permission, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(lxd.GetPermissionsArgs) []api.Permission); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.GetPermissionsArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionsInfo provides a mock function with given fields: args
func (_m *MockContainerServer) GetPermissionsInfo(args lxd.GetPermissionsArgs) ([]api.PermissionInfo, error) {
	ret := _m.Called(args)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsInfo")
	}

	var r0 []api.PermissionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.GetPermissionsArgs) ([]api.PermissionInfo, error)); ok {
		return rf(args)
	}
	if rf, ok := ret.Get(0).(func(lxd.GetPermissionsArgs) []api.PermissionInfo); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.PermissionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.GetPermissionsArgs) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateImage provides a mock function with given fields: fingerprint, secret
func (_m *MockContainerServer) GetPrivateImage(fingerprint string, secret string) (*api.Image, string, error) {
	ret := _m.Called(fingerprint, secret)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateImage")
	}

	var r0 *api.Image
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.Image, string, error)); ok {
		return rf(fingerprint, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.Image); ok {
		r0 = rf(fingerprint, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(fingerprint, secret)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(fingerprint, secret)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPrivateImageFile provides a mock function with given fields: fingerprint, secret, req
func (_m *MockContainerServer) GetPrivateImageFile(fingerprint string, secret string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	ret := _m.Called(fingerprint, secret, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateImageFile")
	}

	var r0 *lxd.ImageFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, lxd.ImageFileRequest) (*lxd.ImageFileResponse, error)); ok {
		return rf(fingerprint, secret, req)
	}
	if rf, ok := ret.Get(0).(func(string, string, lxd.ImageFileRequest) *lxd.ImageFileResponse); ok {
		r0 = rf(fingerprint, secret, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ImageFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, lxd.ImageFileRequest) error); ok {
		r1 = rf(fingerprint, secret, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: name
func (_m *MockContainerServer) GetProfile(name string) (*api.Profile, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *api.Profile
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Profile, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Profile); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProfileNames provides a mock function with no fields
func (_m *MockContainerServer) GetProfileNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProfileNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfiles provides a mock function with no fields
func (_m *MockContainerServer) GetProfiles() ([]api.Profile, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProfiles")
	}

	var r0 []api.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Profile, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Profile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfilesAllProjects provides a mock function with no fields
func (_m *MockContainerServer) GetProfilesAllProjects() ([]api.Profile, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProfilesAllProjects")
	}

	var r0 []api.Profile
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Profile, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Profile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Profile)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: name
func (_m *MockContainerServer) GetProject(name string) (*api.Project, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *api.Project
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Project, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Project); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProjectNames provides a mock function with no fields
func (_m *MockContainerServer) GetProjectNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjectNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectState provides a mock function with given fields: name
func (_m *MockContainerServer) GetProjectState(name string) (*api.ProjectState, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectState")
	}

	var r0 *api.ProjectState
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.ProjectState, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ProjectState); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ProjectState)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjects provides a mock function with no fields
func (_m *MockContainerServer) GetProjects() ([]api.Project, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []api.Project
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Project, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Project)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServer provides a mock function with no fields
func (_m *MockContainerServer) GetServer() (*api.Server, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 *api.Server
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (*api.Server, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Server)
		}
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetServerResources provides a mock function with no fields
func (_m *MockContainerServer) GetServerResources() (*api.Resources, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetServerResources")
	}

	var r0 *api.Resources
	var r1 error
	if rf, ok := ret.Get(0).(func() (*api.Resources, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.Resources); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Resources)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePool provides a mock function with given fields: name
func (_m *MockContainerServer) GetStoragePool(name string) (*api.StoragePool, string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePool")
	}

	var r0 *api.StoragePool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.StoragePool, string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.StoragePool); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StoragePool)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStoragePoolBucket provides a mock function with given fields: poolName, bucketName
func (_m *MockContainerServer) GetStoragePoolBucket(poolName string, bucketName string) (*api.StorageBucket, string, error) {
	ret := _m.Called(poolName, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolBucket")
	}

	var r0 *api.StorageBucket
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*api.StorageBucket, string, error)); ok {
		return rf(poolName, bucketName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *api.StorageBucket); ok {
		r0 = rf(poolName, bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageBucket)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(poolName, bucketName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(poolName, bucketName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStoragePoolBucketKey provides a mock function with given fields: poolName, bucketName, keyName
func (_m *MockContainerServer) GetStoragePoolBucketKey(poolName string, bucketName string, keyName string) (*api.StorageBucketKey, string, error) {
	ret := _m.Called(poolName, bucketName, keyName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolBucketKey")
	}

	var r0 *api.StorageBucketKey
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*api.StorageBucketKey, string, error)); ok {
		return rf(poolName, bucketName, keyName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *api.StorageBucketKey); ok {
		r0 = rf(poolName, bucketName, keyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageBucketKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(poolName, bucketName, keyName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(poolName, bucketName, keyName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStoragePoolBucketKeyNames provides a mock function with given fields: poolName, bucketName
func (_m *MockContainerServer) GetStoragePoolBucketKeyNames(poolName string, bucketName string) ([]string, error) {
	ret := _m.Called(poolName, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolBucketKeyNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(poolName, bucketName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(poolName, bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(poolName, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolBucketKeys provides a mock function with given fields: poolName, bucketName
func (_m *MockContainerServer) GetStoragePoolBucketKeys(poolName string, bucketName string) ([]api.StorageBucketKey, error) {
	ret := _m.Called(poolName, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolBucketKeys")
	}

	var r0 []api.StorageBucketKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]api.StorageBucketKey, error)); ok {
		return rf(poolName, bucketName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []api.StorageBucketKey); ok {
		r0 = rf(poolName, bucketName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageBucketKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(poolName, bucketName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolBucketNames provides a mock function with given fields: poolName
func (_m *MockContainerServer) GetStoragePoolBucketNames(poolName string) ([]string, error) {
	ret := _m.Called(poolName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolBucketNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(poolName)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(poolName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(poolName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolBuckets provides a mock function with given fields: poolName
func (_m *MockContainerServer) GetStoragePoolBuckets(poolName string) ([]api.StorageBucket, error) {
	ret := _m.Called(poolName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolBuckets")
	}

	var r0 []api.StorageBucket
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.StorageBucket, error)); ok {
		return rf(poolName)
	}
	if rf, ok := ret.Get(0).(func(string) []api.StorageBucket); ok {
		r0 = rf(poolName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageBucket)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(poolName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolNames provides a mock function with no fields
func (_m *MockContainerServer) GetStoragePoolNames() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolResources provides a mock function with given fields: name
func (_m *MockContainerServer) GetStoragePoolResources(name string) (*api.ResourcesStoragePool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolResources")
	}

	var r0 *api.ResourcesStoragePool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*api.ResourcesStoragePool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *api.ResourcesStoragePool); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.ResourcesStoragePool)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolume provides a mock function with given fields: pool, volType, name
func (_m *MockContainerServer) GetStoragePoolVolume(pool string, volType string, name string) (*api.StorageVolume, string, error) {
	ret := _m.Called(pool, volType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolume")
	}

	var r0 *api.StorageVolume
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*api.StorageVolume, string, error)); ok {
		return rf(pool, volType, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *api.StorageVolume); ok {
		r0 = rf(pool, volType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(pool, volType, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(pool, volType, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStoragePoolVolumeBackup provides a mock function with given fields: pool, volName, name
func (_m *MockContainerServer) GetStoragePoolVolumeBackup(pool string, volName string, name string) (*api.StoragePoolVolumeBackup, string, error) {
	ret := _m.Called(pool, volName, name)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeBackup")
	}

	var r0 *api.StoragePoolVolumeBackup
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*api.StoragePoolVolumeBackup, string, error)); ok {
		return rf(pool, volName, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *api.StoragePoolVolumeBackup); ok {
		r0 = rf(pool, volName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StoragePoolVolumeBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) string); ok {
		r1 = rf(pool, volName, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(pool, volName, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStoragePoolVolumeBackupFile provides a mock function with given fields: pool, volName, name, req
func (_m *MockContainerServer) GetStoragePoolVolumeBackupFile(pool string, volName string, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	ret := _m.Called(pool, volName, name, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeBackupFile")
	}

	var r0 *lxd.BackupFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error)); ok {
		return rf(pool, volName, name, req)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, *lxd.BackupFileRequest) *lxd.BackupFileResponse); ok {
		r0 = rf(pool, volName, name, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.BackupFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, *lxd.BackupFileRequest) error); ok {
		r1 = rf(pool, volName, name, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeBackupNames provides a mock function with given fields: pool, volName
func (_m *MockContainerServer) GetStoragePoolVolumeBackupNames(pool string, volName string) ([]string, error) {
	ret := _m.Called(pool, volName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeBackupNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return rf(pool, volName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(pool, volName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pool, volName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeBackups provides a mock function with given fields: pool, volName
func (_m *MockContainerServer) GetStoragePoolVolumeBackups(pool string, volName string) ([]api.StoragePoolVolumeBackup, error) {
	ret := _m.Called(pool, volName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeBackups")
	}

	var r0 []api.StoragePoolVolumeBackup
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]api.StoragePoolVolumeBackup, error)); ok {
		return rf(pool, volName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []api.StoragePoolVolumeBackup); ok {
		r0 = rf(pool, volName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StoragePoolVolumeBackup)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pool, volName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeNames provides a mock function with given fields: pool
func (_m *MockContainerServer) GetStoragePoolVolumeNames(pool string) ([]string, error) {
	ret := _m.Called(pool)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(pool)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(pool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeNamesAllProjects provides a mock function with given fields: pool
func (_m *MockContainerServer) GetStoragePoolVolumeNamesAllProjects(pool string) (map[string][]string, error) {
	ret := _m.Called(pool)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeNamesAllProjects")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string][]string, error)); ok {
		return rf(pool)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]string); ok {
		r0 = rf(pool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeSnapshot provides a mock function with given fields: pool, volumeType, volumeName, snapshotName
func (_m *MockContainerServer) GetStoragePoolVolumeSnapshot(pool string, volumeType string, volumeName string, snapshotName string) (*api.StorageVolumeSnapshot, string, error) {
	ret := _m.Called(pool, volumeType, volumeName, snapshotName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeSnapshot")
	}

	var r0 *api.StorageVolumeSnapshot
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (*api.StorageVolumeSnapshot, string, error)); ok {
		return rf(pool, volumeType, volumeName, snapshotName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) *api.StorageVolumeSnapshot); ok {
		r0 = rf(pool, volumeType, volumeName, snapshotName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageVolumeSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) string); ok {
		r1 = rf(pool, volumeType, volumeName, snapshotName)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, string) error); ok {
		r2 = rf(pool, volumeType, volumeName, snapshotName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStoragePoolVolumeSnapshotNames provides a mock function with given fields: pool, volumeType, volumeName
func (_m *MockContainerServer) GetStoragePoolVolumeSnapshotNames(pool string, volumeType string, volumeName string) ([]string, error) {
	ret := _m.Called(pool, volumeType, volumeName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeSnapshotNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]string, error)); ok {
		return rf(pool, volumeType, volumeName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(pool, volumeType, volumeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(pool, volumeType, volumeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeSnapshots provides a mock function with given fields: pool, volumeType, volumeName
func (_m *MockContainerServer) GetStoragePoolVolumeSnapshots(pool string, volumeType string, volumeName string) ([]api.StorageVolumeSnapshot, error) {
	ret := _m.Called(pool, volumeType, volumeName)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeSnapshots")
	}

	var r0 []api.StorageVolumeSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]api.StorageVolumeSnapshot, error)); ok {
		return rf(pool, volumeType, volumeName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []api.StorageVolumeSnapshot); ok {
		r0 = rf(pool, volumeType, volumeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolumeSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(pool, volumeType, volumeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumeState provides a mock function with given fields: pool, volType, name
func (_m *MockContainerServer) GetStoragePoolVolumeState(pool string, volType string, name string) (*api.StorageVolumeState, error) {
	ret := _m.Called(pool, volType, name)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumeState")
	}

	var r0 *api.StorageVolumeState
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*api.StorageVolumeState, error)); ok {
		return rf(pool, volType, name)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *api.StorageVolumeState); ok {
		r0 = rf(pool, volType, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.StorageVolumeState)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(pool, volType, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumes provides a mock function with given fields: pool
func (_m *MockContainerServer) GetStoragePoolVolumes(pool string) ([]api.StorageVolume, error) {
	ret := _m.Called(pool)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumes")
	}

	var r0 []api.StorageVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.StorageVolume, error)); ok {
		return rf(pool)
	}
	if rf, ok := ret.Get(0).(func(string) []api.StorageVolume); ok {
		r0 = rf(pool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumesAllProjects provides a mock function with given fields: pool
func (_m *MockContainerServer) GetStoragePoolVolumesAllProjects(pool string) ([]api.StorageVolume, error) {
	ret := _m.Called(pool)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumesAllProjects")
	}

	var r0 []api.StorageVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]api.StorageVolume, error)); ok {
		return rf(pool)
	}
	if rf, ok := ret.Get(0).(func(string) []api.StorageVolume); ok {
		r0 = rf(pool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumesWithFilter provides a mock function with given fields: pool, filters
func (_m *MockContainerServer) GetStoragePoolVolumesWithFilter(pool string, filters []string) ([]api.StorageVolume, error) {
	ret := _m.Called(pool, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumesWithFilter")
	}

	var r0 []api.StorageVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]api.StorageVolume, error)); ok {
		return rf(pool, filters)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []api.StorageVolume); ok {
		r0 = rf(pool, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(pool, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePoolVolumesWithFilterAllProjects provides a mock function with given fields: pool, filters
func (_m *MockContainerServer) GetStoragePoolVolumesWithFilterAllProjects(pool string, filters []string) ([]api.StorageVolume, error) {
	ret := _m.Called(pool, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePoolVolumesWithFilterAllProjects")
	}

	var r0 []api.StorageVolume
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]api.StorageVolume, error)); ok {
		return rf(pool, filters)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []api.StorageVolume); ok {
		r0 = rf(pool, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(pool, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoragePools provides a mock function with no fields
func (_m *MockContainerServer) GetStoragePools() ([]api.StoragePool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoragePools")
	}

	var r0 []api.StoragePool
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.StoragePool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.StoragePool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StoragePool)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumesWithFilter provides a mock function with given fields: filters
func (_m *MockContainerServer) GetVolumesWithFilter(filters []string) ([]api.StorageVolume, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumesWithFilter")
	}

	var r0 []api.StorageVolume
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]api.StorageVolume, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func([]string) []api.StorageVolume); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumesWithFilterAllProjects provides a mock function with given fields: filters
func (_m *MockContainerServer) GetVolumesWithFilterAllProjects(filters []string) ([]api.StorageVolume, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for GetVolumesWithFilterAllProjects")
	}

	var r0 []api.StorageVolume
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]api.StorageVolume, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func([]string) []api.StorageVolume); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.StorageVolume)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarning provides a mock function with given fields: UUID
func (_m *MockContainerServer) GetWarning(UUID string) (*api.Warning, string, error) {
	ret := _m.Called(UUID)

	if len(ret) == 0 {
		panic("no return value specified for GetWarning")
	}

	var r0 *api.Warning
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*api.Warning, string, error)); ok {
		return rf(UUID)
	}
	if rf, ok := ret.Get(0).(func(string) *api.Warning); ok {
		r0 = rf(UUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Warning)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(UUID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(UUID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWarningUUIDs provides a mock function with no fields
func (_m *MockContainerServer) GetWarningUUIDs() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWarningUUIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarnings provides a mock function with no fields
func (_m *MockContainerServer) GetWarnings() ([]api.Warning, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWarnings")
	}

	var r0 []api.Warning
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]api.Warning, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []api.Warning); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Warning)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasExtension provides a mock function with given fields: extension
func (_m *MockContainerServer) HasExtension(extension string) bool {
	ret := _m.Called(extension)

	if len(ret) == 0 {
		panic("no return value specified for HasExtension")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(extension)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsClustered provides a mock function with no fields
func (_m *MockContainerServer) IsClustered() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsClustered")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MigrateContainer provides a mock function with given fields: name, container
func (_m *MockContainerServer) MigrateContainer(name string, container api.ContainerPost) (lxd.Operation, error) {
	ret := _m.Called(name, container)

	if len(ret) == 0 {
		panic("no return value specified for MigrateContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerPost) (lxd.Operation, error)); ok {
		return rf(name, container)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerPost) lxd.Operation); ok {
		r0 = rf(name, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerPost) error); ok {
		r1 = rf(name, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateContainerSnapshot provides a mock function with given fields: containerName, name, container
func (_m *MockContainerServer) MigrateContainerSnapshot(containerName string, name string, container api.ContainerSnapshotPost) (lxd.Operation, error) {
	ret := _m.Called(containerName, name, container)

	if len(ret) == 0 {
		panic("no return value specified for MigrateContainerSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerSnapshotPost) (lxd.Operation, error)); ok {
		return rf(containerName, name, container)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerSnapshotPost) lxd.Operation); ok {
		r0 = rf(containerName, name, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.ContainerSnapshotPost) error); ok {
		r1 = rf(containerName, name, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateInstance provides a mock function with given fields: name, instance
func (_m *MockContainerServer) MigrateInstance(name string, instance api.InstancePost) (lxd.Operation, error) {
	ret := _m.Called(name, instance)

	if len(ret) == 0 {
		panic("no return value specified for MigrateInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstancePost) (lxd.Operation, error)); ok {
		return rf(name, instance)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstancePost) lxd.Operation); ok {
		r0 = rf(name, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstancePost) error); ok {
		r1 = rf(name, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateInstanceSnapshot provides a mock function with given fields: instanceName, name, instance
func (_m *MockContainerServer) MigrateInstanceSnapshot(instanceName string, name string, instance api.InstanceSnapshotPost) (lxd.Operation, error) {
	ret := _m.Called(instanceName, name, instance)

	if len(ret) == 0 {
		panic("no return value specified for MigrateInstanceSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceSnapshotPost) (lxd.Operation, error)); ok {
		return rf(instanceName, name, instance)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceSnapshotPost) lxd.Operation); ok {
		r0 = rf(instanceName, name, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.InstanceSnapshotPost) error); ok {
		r1 = rf(instanceName, name, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateStoragePoolVolume provides a mock function with given fields: pool, volume
func (_m *MockContainerServer) MigrateStoragePoolVolume(pool string, volume api.StorageVolumePost) (lxd.Operation, error) {
	ret := _m.Called(pool, volume)

	if len(ret) == 0 {
		panic("no return value specified for MigrateStoragePoolVolume")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.StorageVolumePost) (lxd.Operation, error)); ok {
		return rf(pool, volume)
	}
	if rf, ok := ret.Get(0).(func(string, api.StorageVolumePost) lxd.Operation); ok {
		r0 = rf(pool, volume)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.StorageVolumePost) error); ok {
		r1 = rf(pool, volume)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveStoragePoolVolume provides a mock function with given fields: pool, source, sourcePool, volume, args
func (_m *MockContainerServer) MoveStoragePoolVolume(pool string, source lxd.InstanceServer, sourcePool string, volume api.StorageVolume, args *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error) {
	ret := _m.Called(pool, source, sourcePool, volume, args)

	if len(ret) == 0 {
		panic("no return value specified for MoveStoragePoolVolume")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error)); ok {
		return rf(pool, source, sourcePool, volume, args)
	}
	if rf, ok := ret.Get(0).(func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeMoveArgs) lxd.RemoteOperation); ok {
		r0 = rf(pool, source, sourcePool, volume, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, lxd.InstanceServer, string, api.StorageVolume, *lxd.StoragePoolVolumeMoveArgs) error); ok {
		r1 = rf(pool, source, sourcePool, volume, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawOperation provides a mock function with given fields: method, path, data, queryETag
func (_m *MockContainerServer) RawOperation(method string, path string, data interface{}, queryETag string) (lxd.Operation, string, error) {
	ret := _m.Called(method, path, data, queryETag)

	if len(ret) == 0 {
		panic("no return value specified for RawOperation")
	}

	var r0 lxd.Operation
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) (lxd.Operation, string, error)); ok {
		return rf(method, path, data, queryETag)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) lxd.Operation); ok {
		r0 = rf(method, path, data, queryETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, string) string); ok {
		r1 = rf(method, path, data, queryETag)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, interface{}, string) error); ok {
		r2 = rf(method, path, data, queryETag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RawQuery provides a mock function with given fields: method, path, data, queryETag
func (_m *MockContainerServer) RawQuery(method string, path string, data interface{}, queryETag string) (*api.Response, string, error) {
	ret := _m.Called(method, path, data, queryETag)

	if len(ret) == 0 {
		panic("no return value specified for RawQuery")
	}

	var r0 *api.Response
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) (*api.Response, string, error)); ok {
		return rf(method, path, data, queryETag)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, string) *api.Response); ok {
		r0 = rf(method, path, data, queryETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, string) string); ok {
		r1 = rf(method, path, data, queryETag)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string, interface{}, string) error); ok {
		r2 = rf(method, path, data, queryETag)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RawWebsocket provides a mock function with given fields: path
func (_m *MockContainerServer) RawWebsocket(path string) (*websocket.Conn, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RawWebsocket")
	}

	var r0 *websocket.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*websocket.Conn, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *websocket.Conn); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*websocket.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebuildInstance provides a mock function with given fields: instanceName, req
func (_m *MockContainerServer) RebuildInstance(instanceName string, req api.InstanceRebuildPost) (lxd.Operation, error) {
	ret := _m.Called(instanceName, req)

	if len(ret) == 0 {
		panic("no return value specified for RebuildInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceRebuildPost) (lxd.Operation, error)); ok {
		return rf(instanceName, req)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceRebuildPost) lxd.Operation); ok {
		r0 = rf(instanceName, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceRebuildPost) error); ok {
		r1 = rf(instanceName, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebuildInstanceFromImage provides a mock function with given fields: source, image, instanceName, req
func (_m *MockContainerServer) RebuildInstanceFromImage(source lxd.ImageServer, image api.Image, instanceName string, req api.InstanceRebuildPost) (lxd.RemoteOperation, error) {
	ret := _m.Called(source, image, instanceName, req)

	if len(ret) == 0 {
		panic("no return value specified for RebuildInstanceFromImage")
	}

	var r0 lxd.RemoteOperation
	var r1 error
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, string, api.InstanceRebuildPost) (lxd.RemoteOperation, error)); ok {
		return rf(source, image, instanceName, req)
	}
	if rf, ok := ret.Get(0).(func(lxd.ImageServer, api.Image, string, api.InstanceRebuildPost) lxd.RemoteOperation); ok {
		r0 = rf(source, image, instanceName, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.RemoteOperation)
		}
	}

	if rf, ok := ret.Get(1).(func(lxd.ImageServer, api.Image, string, api.InstanceRebuildPost) error); ok {
		r1 = rf(source, image, instanceName, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshImage provides a mock function with given fields: fingerprint
func (_m *MockContainerServer) RefreshImage(fingerprint string) (lxd.Operation, error) {
	ret := _m.Called(fingerprint)

	if len(ret) == 0 {
		panic("no return value specified for RefreshImage")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (lxd.Operation, error)); ok {
		return rf(fingerprint)
	}
	if rf, ok := ret.Get(0).(func(string) lxd.Operation); ok {
		r0 = rf(fingerprint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fingerprint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameAuthGroup provides a mock function with given fields: groupName, groupPost
func (_m *MockContainerServer) RenameAuthGroup(groupName string, groupPost api.AuthGroupPost) error {
	ret := _m.Called(groupName, groupPost)

	if len(ret) == 0 {
		panic("no return value specified for RenameAuthGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.AuthGroupPost) error); ok {
		r0 = rf(groupName, groupPost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameClusterGroup provides a mock function with given fields: name, group
func (_m *MockContainerServer) RenameClusterGroup(name string, group api.ClusterGroupPost) error {
	ret := _m.Called(name, group)

	if len(ret) == 0 {
		panic("no return value specified for RenameClusterGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ClusterGroupPost) error); ok {
		r0 = rf(name, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameClusterMember provides a mock function with given fields: name, member
func (_m *MockContainerServer) RenameClusterMember(name string, member api.ClusterMemberPost) error {
	ret := _m.Called(name, member)

	if len(ret) == 0 {
		panic("no return value specified for RenameClusterMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ClusterMemberPost) error); ok {
		r0 = rf(name, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameContainer provides a mock function with given fields: name, container
func (_m *MockContainerServer) RenameContainer(name string, container api.ContainerPost) (lxd.Operation, error) {
	ret := _m.Called(name, container)

	if len(ret) == 0 {
		panic("no return value specified for RenameContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerPost) (lxd.Operation, error)); ok {
		return rf(name, container)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerPost) lxd.Operation); ok {
		r0 = rf(name, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerPost) error); ok {
		r1 = rf(name, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameContainerBackup provides a mock function with given fields: containerName, name, backup
func (_m *MockContainerServer) RenameContainerBackup(containerName string, name string, backup api.ContainerBackupPost) (lxd.Operation, error) {
	ret := _m.Called(containerName, name, backup)

	if len(ret) == 0 {
		panic("no return value specified for RenameContainerBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerBackupPost) (lxd.Operation, error)); ok {
		return rf(containerName, name, backup)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerBackupPost) lxd.Operation); ok {
		r0 = rf(containerName, name, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.ContainerBackupPost) error); ok {
		r1 = rf(containerName, name, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameContainerSnapshot provides a mock function with given fields: containerName, name, container
func (_m *MockContainerServer) RenameContainerSnapshot(containerName string, name string, container api.ContainerSnapshotPost) (lxd.Operation, error) {
	ret := _m.Called(containerName, name, container)

	if len(ret) == 0 {
		panic("no return value specified for RenameContainerSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerSnapshotPost) (lxd.Operation, error)); ok {
		return rf(containerName, name, container)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerSnapshotPost) lxd.Operation); ok {
		r0 = rf(containerName, name, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.ContainerSnapshotPost) error); ok {
		r1 = rf(containerName, name, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameIdentityProviderGroup provides a mock function with given fields: identityProviderGroupName, identityProviderGroupPost
func (_m *MockContainerServer) RenameIdentityProviderGroup(identityProviderGroupName string, identityProviderGroupPost api.IdentityProviderGroupPost) error {
	ret := _m.Called(identityProviderGroupName, identityProviderGroupPost)

	if len(ret) == 0 {
		panic("no return value specified for RenameIdentityProviderGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.IdentityProviderGroupPost) error); ok {
		r0 = rf(identityProviderGroupName, identityProviderGroupPost)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameImageAlias provides a mock function with given fields: name, alias
func (_m *MockContainerServer) RenameImageAlias(name string, alias api.ImageAliasesEntryPost) error {
	ret := _m.Called(name, alias)

	if len(ret) == 0 {
		panic("no return value specified for RenameImageAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ImageAliasesEntryPost) error); ok {
		r0 = rf(name, alias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameInstance provides a mock function with given fields: name, instance
func (_m *MockContainerServer) RenameInstance(name string, instance api.InstancePost) (lxd.Operation, error) {
	ret := _m.Called(name, instance)

	if len(ret) == 0 {
		panic("no return value specified for RenameInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstancePost) (lxd.Operation, error)); ok {
		return rf(name, instance)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstancePost) lxd.Operation); ok {
		r0 = rf(name, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstancePost) error); ok {
		r1 = rf(name, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameInstanceBackup provides a mock function with given fields: instanceName, name, backup
func (_m *MockContainerServer) RenameInstanceBackup(instanceName string, name string, backup api.InstanceBackupPost) (lxd.Operation, error) {
	ret := _m.Called(instanceName, name, backup)

	if len(ret) == 0 {
		panic("no return value specified for RenameInstanceBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceBackupPost) (lxd.Operation, error)); ok {
		return rf(instanceName, name, backup)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceBackupPost) lxd.Operation); ok {
		r0 = rf(instanceName, name, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.InstanceBackupPost) error); ok {
		r1 = rf(instanceName, name, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameInstanceSnapshot provides a mock function with given fields: instanceName, name, instance
func (_m *MockContainerServer) RenameInstanceSnapshot(instanceName string, name string, instance api.InstanceSnapshotPost) (lxd.Operation, error) {
	ret := _m.Called(instanceName, name, instance)

	if len(ret) == 0 {
		panic("no return value specified for RenameInstanceSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceSnapshotPost) (lxd.Operation, error)); ok {
		return rf(instanceName, name, instance)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceSnapshotPost) lxd.Operation); ok {
		r0 = rf(instanceName, name, instance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.InstanceSnapshotPost) error); ok {
		r1 = rf(instanceName, name, instance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameNetwork provides a mock function with given fields: name, network
func (_m *MockContainerServer) RenameNetwork(name string, network api.NetworkPost) error {
	ret := _m.Called(name, network)

	if len(ret) == 0 {
		panic("no return value specified for RenameNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkPost) error); ok {
		r0 = rf(name, network)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameNetworkACL provides a mock function with given fields: name, acl
func (_m *MockContainerServer) RenameNetworkACL(name string, acl api.NetworkACLPost) error {
	ret := _m.Called(name, acl)

	if len(ret) == 0 {
		panic("no return value specified for RenameNetworkACL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkACLPost) error); ok {
		r0 = rf(name, acl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameProfile provides a mock function with given fields: name, profile
func (_m *MockContainerServer) RenameProfile(name string, profile api.ProfilePost) error {
	ret := _m.Called(name, profile)

	if len(ret) == 0 {
		panic("no return value specified for RenameProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ProfilePost) error); ok {
		r0 = rf(name, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameProject provides a mock function with given fields: name, project
func (_m *MockContainerServer) RenameProject(name string, project api.ProjectPost) (lxd.Operation, error) {
	ret := _m.Called(name, project)

	if len(ret) == 0 {
		panic("no return value specified for RenameProject")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ProjectPost) (lxd.Operation, error)); ok {
		return rf(name, project)
	}
	if rf, ok := ret.Get(0).(func(string, api.ProjectPost) lxd.Operation); ok {
		r0 = rf(name, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ProjectPost) error); ok {
		r1 = rf(name, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameStoragePoolVolume provides a mock function with given fields: pool, volType, name, volume
func (_m *MockContainerServer) RenameStoragePoolVolume(pool string, volType string, name string, volume api.StorageVolumePost) error {
	ret := _m.Called(pool, volType, name, volume)

	if len(ret) == 0 {
		panic("no return value specified for RenameStoragePoolVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, api.StorageVolumePost) error); ok {
		r0 = rf(pool, volType, name, volume)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenameStoragePoolVolumeBackup provides a mock function with given fields: pool, volName, name, backup
func (_m *MockContainerServer) RenameStoragePoolVolumeBackup(pool string, volName string, name string, backup api.StoragePoolVolumeBackupPost) (lxd.Operation, error) {
	ret := _m.Called(pool, volName, name, backup)

	if len(ret) == 0 {
		panic("no return value specified for RenameStoragePoolVolumeBackup")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, api.StoragePoolVolumeBackupPost) (lxd.Operation, error)); ok {
		return rf(pool, volName, name, backup)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, api.StoragePoolVolumeBackupPost) lxd.Operation); ok {
		r0 = rf(pool, volName, name, backup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, api.StoragePoolVolumeBackupPost) error); ok {
		r1 = rf(pool, volName, name, backup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameStoragePoolVolumeSnapshot provides a mock function with given fields: pool, volumeType, volumeName, snapshotName, snapshot
func (_m *MockContainerServer) RenameStoragePoolVolumeSnapshot(pool string, volumeType string, volumeName string, snapshotName string, snapshot api.StorageVolumeSnapshotPost) (lxd.Operation, error) {
	ret := _m.Called(pool, volumeType, volumeName, snapshotName, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for RenameStoragePoolVolumeSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, api.StorageVolumeSnapshotPost) (lxd.Operation, error)); ok {
		return rf(pool, volumeType, volumeName, snapshotName, snapshot)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, api.StorageVolumeSnapshotPost) lxd.Operation); ok {
		r0 = rf(pool, volumeType, volumeName, snapshotName, snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, api.StorageVolumeSnapshotPost) error); ok {
		r1 = rf(pool, volumeType, volumeName, snapshotName, snapshot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequireAuthenticated provides a mock function with given fields: authenticated
func (_m *MockContainerServer) RequireAuthenticated(authenticated bool) {
	_m.Called(authenticated)
}

// SendEvent provides a mock function with given fields: event
func (_m *MockContainerServer) SendEvent(event api.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetContainerMetadata provides a mock function with given fields: name, metadata, ETag
func (_m *MockContainerServer) SetContainerMetadata(name string, metadata api.ImageMetadata, ETag string) error {
	ret := _m.Called(name, metadata, ETag)

	if len(ret) == 0 {
		panic("no return value specified for SetContainerMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ImageMetadata, string) error); ok {
		r0 = rf(name, metadata, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAuthGroup provides a mock function with given fields: groupName, groupPut, ETag
func (_m *MockContainerServer) UpdateAuthGroup(groupName string, groupPut api.AuthGroupPut, ETag string) error {
	ret := _m.Called(groupName, groupPut, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.AuthGroupPut, string) error); ok {
		r0 = rf(groupName, groupPut, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCertificate provides a mock function with given fields: fingerprint, certificate, ETag
func (_m *MockContainerServer) UpdateCertificate(fingerprint string, certificate api.CertificatePut, ETag string) error {
	ret := _m.Called(fingerprint, certificate, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.CertificatePut, string) error); ok {
		r0 = rf(fingerprint, certificate, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCluster provides a mock function with given fields: cluster, ETag
func (_m *MockContainerServer) UpdateCluster(cluster api.ClusterPut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(cluster, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.ClusterPut, string) (lxd.Operation, error)); ok {
		return rf(cluster, ETag)
	}
	if rf, ok := ret.Get(0).(func(api.ClusterPut, string) lxd.Operation); ok {
		r0 = rf(cluster, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.ClusterPut, string) error); ok {
		r1 = rf(cluster, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterCertificate provides a mock function with given fields: certs, ETag
func (_m *MockContainerServer) UpdateClusterCertificate(certs api.ClusterCertificatePut, ETag string) error {
	ret := _m.Called(certs, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterCertificate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ClusterCertificatePut, string) error); ok {
		r0 = rf(certs, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClusterGroup provides a mock function with given fields: name, group, ETag
func (_m *MockContainerServer) UpdateClusterGroup(name string, group api.ClusterGroupPut, ETag string) error {
	ret := _m.Called(name, group, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ClusterGroupPut, string) error); ok {
		r0 = rf(name, group, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClusterMember provides a mock function with given fields: name, member, ETag
func (_m *MockContainerServer) UpdateClusterMember(name string, member api.ClusterMemberPut, ETag string) error {
	ret := _m.Called(name, member, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ClusterMemberPut, string) error); ok {
		r0 = rf(name, member, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClusterMemberState provides a mock function with given fields: name, state
func (_m *MockContainerServer) UpdateClusterMemberState(name string, state api.ClusterMemberStatePost) (lxd.Operation, error) {
	ret := _m.Called(name, state)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterMemberState")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ClusterMemberStatePost) (lxd.Operation, error)); ok {
		return rf(name, state)
	}
	if rf, ok := ret.Get(0).(func(string, api.ClusterMemberStatePost) lxd.Operation); ok {
		r0 = rf(name, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ClusterMemberStatePost) error); ok {
		r1 = rf(name, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainer provides a mock function with given fields: name, container, ETag
func (_m *MockContainerServer) UpdateContainer(name string, container api.ContainerPut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(name, container, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainer")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerPut, string) (lxd.Operation, error)); ok {
		return rf(name, container, ETag)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerPut, string) lxd.Operation); ok {
		r0 = rf(name, container, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerPut, string) error); ok {
		r1 = rf(name, container, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerSnapshot provides a mock function with given fields: containerName, name, container, ETag
func (_m *MockContainerServer) UpdateContainerSnapshot(containerName string, name string, container api.ContainerSnapshotPut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(containerName, name, container, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerSnapshotPut, string) (lxd.Operation, error)); ok {
		return rf(containerName, name, container, ETag)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.ContainerSnapshotPut, string) lxd.Operation); ok {
		r0 = rf(containerName, name, container, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.ContainerSnapshotPut, string) error); ok {
		r1 = rf(containerName, name, container, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerState provides a mock function with given fields: name, state, ETag
func (_m *MockContainerServer) UpdateContainerState(name string, state api.ContainerStatePut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(name, state, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerState")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.ContainerStatePut, string) (lxd.Operation, error)); ok {
		return rf(name, state, ETag)
	}
	if rf, ok := ret.Get(0).(func(string, api.ContainerStatePut, string) lxd.Operation); ok {
		r0 = rf(name, state, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.ContainerStatePut, string) error); ok {
		r1 = rf(name, state, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerTemplateFile provides a mock function with given fields: containerName, templateName, content
func (_m *MockContainerServer) UpdateContainerTemplateFile(containerName string, templateName string, content io.ReadSeeker) error {
	ret := _m.Called(containerName, templateName, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerTemplateFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, io.ReadSeeker) error); ok {
		r0 = rf(containerName, templateName, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIdentity provides a mock function with given fields: authenticationMethod, nameOrIdentifier, identityPut, ETag
func (_m *MockContainerServer) UpdateIdentity(authenticationMethod string, nameOrIdentifier string, identityPut api.IdentityPut, ETag string) error {
	ret := _m.Called(authenticationMethod, nameOrIdentifier, identityPut, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, api.IdentityPut, string) error); ok {
		r0 = rf(authenticationMethod, nameOrIdentifier, identityPut, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIdentityProviderGroup provides a mock function with given fields: identityProviderGroupName, identityProviderGroupPut, ETag
func (_m *MockContainerServer) UpdateIdentityProviderGroup(identityProviderGroupName string, identityProviderGroupPut api.IdentityProviderGroupPut, ETag string) error {
	ret := _m.Called(identityProviderGroupName, identityProviderGroupPut, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProviderGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.IdentityProviderGroupPut, string) error); ok {
		r0 = rf(identityProviderGroupName, identityProviderGroupPut, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImage provides a mock function with given fields: fingerprint, image, ETag
func (_m *MockContainerServer) UpdateImage(fingerprint string, image api.ImagePut, ETag string) error {
	ret := _m.Called(fingerprint, image, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ImagePut, string) error); ok {
		r0 = rf(fingerprint, image, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateImageAlias provides a mock function with given fields: name, alias, ETag
func (_m *MockContainerServer) UpdateImageAlias(name string, alias api.ImageAliasesEntryPut, ETag string) error {
	ret := _m.Called(name, alias, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageAlias")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ImageAliasesEntryPut, string) error); ok {
		r0 = rf(name, alias, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInstance provides a mock function with given fields: name, instance, ETag
func (_m *MockContainerServer) UpdateInstance(name string, instance api.InstancePut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(name, instance, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstance")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstancePut, string) (lxd.Operation, error)); ok {
		return rf(name, instance, ETag)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstancePut, string) lxd.Operation); ok {
		r0 = rf(name, instance, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstancePut, string) error); ok {
		r1 = rf(name, instance, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceMetadata provides a mock function with given fields: name, metadata, ETag
func (_m *MockContainerServer) UpdateInstanceMetadata(name string, metadata api.ImageMetadata, ETag string) error {
	ret := _m.Called(name, metadata, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ImageMetadata, string) error); ok {
		r0 = rf(name, metadata, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInstanceSnapshot provides a mock function with given fields: instanceName, name, instance, ETag
func (_m *MockContainerServer) UpdateInstanceSnapshot(instanceName string, name string, instance api.InstanceSnapshotPut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(instanceName, name, instance, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceSnapshot")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceSnapshotPut, string) (lxd.Operation, error)); ok {
		return rf(instanceName, name, instance, ETag)
	}
	if rf, ok := ret.Get(0).(func(string, string, api.InstanceSnapshotPut, string) lxd.Operation); ok {
		r0 = rf(instanceName, name, instance, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, api.InstanceSnapshotPut, string) error); ok {
		r1 = rf(instanceName, name, instance, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceState provides a mock function with given fields: name, state, ETag
func (_m *MockContainerServer) UpdateInstanceState(name string, state api.InstanceStatePut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(name, state, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceState")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceStatePut, string) (lxd.Operation, error)); ok {
		return rf(name, state, ETag)
	}
	if rf, ok := ret.Get(0).(func(string, api.InstanceStatePut, string) lxd.Operation); ok {
		r0 = rf(name, state, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(string, api.InstanceStatePut, string) error); ok {
		r1 = rf(name, state, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceUEFIVars provides a mock function with given fields: name, instanceUEFI, ETag
func (_m *MockContainerServer) UpdateInstanceUEFIVars(name string, instanceUEFI api.InstanceUEFIVars, ETag string) error {
	ret := _m.Called(name, instanceUEFI, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceUEFIVars")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.InstanceUEFIVars, string) error); ok {
		r0 = rf(name, instanceUEFI, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInstances provides a mock function with given fields: state, ETag
func (_m *MockContainerServer) UpdateInstances(state api.InstancesPut, ETag string) (lxd.Operation, error) {
	ret := _m.Called(state, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstances")
	}

	var r0 lxd.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(api.InstancesPut, string) (lxd.Operation, error)); ok {
		return rf(state, ETag)
	}
	if rf, ok := ret.Get(0).(func(api.InstancesPut, string) lxd.Operation); ok {
		r0 = rf(state, ETag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(api.InstancesPut, string) error); ok {
		r1 = rf(state, ETag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetwork provides a mock function with given fields: name, network, ETag
func (_m *MockContainerServer) UpdateNetwork(name string, network api.NetworkPut, ETag string) error {
	ret := _m.Called(name, network, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetwork")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkPut, string) error); ok {
		r0 = rf(name, network, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNetworkACL provides a mock function with given fields: name, acl, ETag
func (_m *MockContainerServer) UpdateNetworkACL(name string, acl api.NetworkACLPut, ETag string) error {
	ret := _m.Called(name, acl, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkACL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkACLPut, string) error); ok {
		r0 = rf(name, acl, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNetworkForward provides a mock function with given fields: networkName, listenAddress, forward, ETag
func (_m *MockContainerServer) UpdateNetworkForward(networkName string, listenAddress string, forward api.NetworkForwardPut, ETag string) error {
	ret := _m.Called(networkName, listenAddress, forward, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkForward")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, api.NetworkForwardPut, string) error); ok {
		r0 = rf(networkName, listenAddress, forward, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNetworkLoadBalancer provides a mock function with given fields: networkName, listenAddress, forward, ETag
func (_m *MockContainerServer) UpdateNetworkLoadBalancer(networkName string, listenAddress string, forward api.NetworkLoadBalancerPut, ETag string) error {
	ret := _m.Called(networkName, listenAddress, forward, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkLoadBalancer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, api.NetworkLoadBalancerPut, string) error); ok {
		r0 = rf(networkName, listenAddress, forward, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNetworkPeer provides a mock function with given fields: networkName, peerName, peer, ETag
func (_m *MockContainerServer) UpdateNetworkPeer(networkName string, peerName string, peer api.NetworkPeerPut, ETag string) error {
	ret := _m.Called(networkName, peerName, peer, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkPeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, api.NetworkPeerPut, string) error); ok {
		r0 = rf(networkName, peerName, peer, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNetworkZone provides a mock function with given fields: name, zone, ETag
func (_m *MockContainerServer) UpdateNetworkZone(name string, zone api.NetworkZonePut, ETag string) error {
	ret := _m.Called(name, zone, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkZone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.NetworkZonePut, string) error); ok {
		r0 = rf(name, zone, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNetworkZoneRecord provides a mock function with given fields: zone, name, record, ETag
func (_m *MockContainerServer) UpdateNetworkZoneRecord(zone string, name string, record api.NetworkZoneRecordPut, ETag string) error {
	ret := _m.Called(zone, name, record, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkZoneRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, api.NetworkZoneRecordPut, string) error); ok {
		r0 = rf(zone, name, record, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: name, profile, ETag
func (_m *MockContainerServer) UpdateProfile(name string, profile api.ProfilePut, ETag string) error {
	ret := _m.Called(name, profile, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ProfilePut, string) error); ok {
		r0 = rf(name, profile, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: name, project, ETag
func (_m *MockContainerServer) UpdateProject(name string, project api.ProjectPut, ETag string) error {
	ret := _m.Called(name, project, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.ProjectPut, string) error); ok {
		r0 = rf(name, project, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServer provides a mock function with given fields: server, ETag
func (_m *MockContainerServer) UpdateServer(server api.ServerPut, ETag string) error {
	ret := _m.Called(server, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.ServerPut, string) error); ok {
		r0 = rf(server, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoragePool provides a mock function with given fields: name, pool, ETag
func (_m *MockContainerServer) UpdateStoragePool(name string, pool api.StoragePoolPut, ETag string) error {
	ret := _m.Called(name, pool, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoragePool")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.StoragePoolPut, string) error); ok {
		r0 = rf(name, pool, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoragePoolBucket provides a mock function with given fields: poolName, bucketName, bucket, ETag
func (_m *MockContainerServer) UpdateStoragePoolBucket(poolName string, bucketName string, bucket api.StorageBucketPut, ETag string) error {
	ret := _m.Called(poolName, bucketName, bucket, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoragePoolBucket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, api.StorageBucketPut, string) error); ok {
		r0 = rf(poolName, bucketName, bucket, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoragePoolBucketKey provides a mock function with given fields: poolName, bucketName, keyName, key, ETag
func (_m *MockContainerServer) UpdateStoragePoolBucketKey(poolName string, bucketName string, keyName string, key api.StorageBucketKeyPut, ETag string) error {
	ret := _m.Called(poolName, bucketName, keyName, key, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoragePoolBucketKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, api.StorageBucketKeyPut, string) error); ok {
		r0 = rf(poolName, bucketName, keyName, key, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoragePoolVolume provides a mock function with given fields: pool, volType, name, volume, ETag
func (_m *MockContainerServer) UpdateStoragePoolVolume(pool string, volType string, name string, volume api.StorageVolumePut, ETag string) error {
	ret := _m.Called(pool, volType, name, volume, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoragePoolVolume")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, api.StorageVolumePut, string) error); ok {
		r0 = rf(pool, volType, name, volume, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoragePoolVolumeSnapshot provides a mock function with given fields: pool, volumeType, volumeName, snapshotName, volume, ETag
func (_m *MockContainerServer) UpdateStoragePoolVolumeSnapshot(pool string, volumeType string, volumeName string, snapshotName string, volume api.StorageVolumeSnapshotPut, ETag string) error {
	ret := _m.Called(pool, volumeType, volumeName, snapshotName, volume, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoragePoolVolumeSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, api.StorageVolumeSnapshotPut, string) error); ok {
		r0 = rf(pool, volumeType, volumeName, snapshotName, volume, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWarning provides a mock function with given fields: UUID, warning, ETag
func (_m *MockContainerServer) UpdateWarning(UUID string, warning api.WarningPut, ETag string) error {
	ret := _m.Called(UUID, warning, ETag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWarning")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.WarningPut, string) error); ok {
		r0 = rf(UUID, warning, ETag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseProject provides a mock function with given fields: name
func (_m *MockContainerServer) UseProject(name string) lxd.InstanceServer {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UseProject")
	}

	var r0 lxd.InstanceServer
	if rf, ok := ret.Get(0).(func(string) lxd.InstanceServer); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.InstanceServer)
		}
	}

	return r0
}

// UseTarget provides a mock function with given fields: name
func (_m *MockContainerServer) UseTarget(name string) lxd.InstanceServer {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for UseTarget")
	}

	var r0 lxd.InstanceServer
	if rf, ok := ret.Get(0).(func(string) lxd.InstanceServer); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lxd.InstanceServer)
		}
	}

	return r0
}

// NewMockContainerServer creates a new instance of MockContainerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContainerServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContainerServer {
	mock := &MockContainerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
