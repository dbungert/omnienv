// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	http "net/http"

	lxd "github.com/canonical/lxd/client"
	mock "github.com/stretchr/testify/mock"
)

// MockServer is an autogenerated mock type for the Server type
type MockServer struct {
	mock.Mock
}

// Disconnect provides a mock function with no fields
func (_m *MockServer) Disconnect() {
	_m.Called()
}

// DoHTTP provides a mock function with given fields: req
func (_m *MockServer) DoHTTP(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for DoHTTP")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionInfo provides a mock function with no fields
func (_m *MockServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionInfo")
	}

	var r0 *lxd.ConnectionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*lxd.ConnectionInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *lxd.ConnectionInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lxd.ConnectionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHTTPClient provides a mock function with no fields
func (_m *MockServer) GetHTTPClient() (*http.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPClient")
	}

	var r0 *http.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*http.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockServer creates a new instance of MockServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServer {
	mock := &MockServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
